<samples> 
<sample>
	<name>AntiAlias</name>
	<dxarea>Direct3D</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
  <yearadded>2004</yearadded>
  <monthadded>10</monthadded>
	<description>
	<![CDATA[Multisampling attempts to reduce aliasing by mimicking a higher resolution display; multiple sample points are used to determine each pixel's color. This sample shows how the various multisampling techniques supported by your video card affect the scene's rendering. Although multisampling effectively combats aliasing, under particular situations it can introduce visual artifacts of its own. As illustrated by the sample, centroid sampling seeks to eliminate one common type of multisampling artifact. Support for centroid sampling is supported under Pixel Shader 2.0 in the latest version of the DirectX runtime.]]>
	</description>
	<folder>Samples\C++\Direct3D\AntiAlias\</folder>
	<exefolder>Samples\C++\Direct3D\Bin\</exefolder>
	<exe>AntiAlias.exe</exe>
  	<doc>Documentation/DirectX9/directx_sdk.chm::/antialias_sample.htm</doc>  	     
	<screenshot>AntiAlias.gif</screenshot>
  	<projectfile6></projectfile6>
	<projectfile7>AntiAlias.sln</projectfile7>
	<install dxut="true">
	</install>
	<language>C++</language>
	<complexity>1500</complexity>
	<keywords>
		<keyword>Aliasing</keyword>
		<keyword>Jaggies</keyword>
		<keyword>Multisample</keyword>
		<keyword>IDirect3DDevice9</keyword>
		<keyword>IDirect3D9</keyword>
	</keywords>
<visible>true</visible></sample>
<sample>
	<name>BasicHLSL</name>
	<dxarea>Direct3D</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
  <yearadded>2003</yearadded>
  <monthadded>9</monthadded>
	<description>
	<![CDATA[This sample shows a simple example of the High-Level Shader Language (HLSL) using the effect interface.]]>
	</description>
	<folder>Samples\C++\Direct3D\BasicHLSL\</folder>
	<exefolder>Samples\C++\Direct3D\Bin\</exefolder>
	<exe>BasicHLSL.exe</exe>
	<screenshot>BasicHLSL.jpg</screenshot>
  	<doc>Documentation/DirectX9/directx_sdk.chm::/basichlsl_sample.htm</doc>  	     
	<projectfile6>BasicHLSL.dsw</projectfile6>
	<projectfile7>BasicHLSL.sln</projectfile7>
	<install dxut="true">
		<media>Tiny</media>
	</install>
	<language>C++</language>
	<complexity>50</complexity>
	<keywords>
		<keyword>IDirect3DDevice9</keyword>
		<keyword>IDirect3D9</keyword>
	</keywords>
<visible>true</visible></sample>
<sample>
	<name>CompiledEffect</name>
	<dxarea>Direct3D</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
  <yearadded>2003</yearadded>
  <monthadded>9</monthadded>
	<description>
	<![CDATA[This sample shows how an ID3DXEffect object can be compiled when the project is built and loaded directly as a binary file at runtime.]]>
	</description>
	<folder>Samples\C++\Direct3D\CompiledEffect\</folder>
	<exefolder>Samples\C++\Direct3D\Bin\</exefolder>
	<screenshot>CompiledEffect.jpg</screenshot>
  	<doc>Documentation/DirectX9/directx_sdk.chm::/compiledeffect_sample.htm</doc>  	     
	<projectfile6>CompiledEffect.dsw</projectfile6>
	<projectfile7>CompiledEffect.sln</projectfile7>
	<install dxut="true">
		<media>Dwarf</media>
	</install>
	<language>C++</language>
	<complexity>700</complexity>
	<keywords>
		<keyword>IDirect3DDevice9</keyword>
		<keyword>ID3DXEffect</keyword>
		<keyword>IDirect3D9</keyword>
	</keywords>
<visible>true</visible></sample>
<sample>
	<name>ConfigSystem</name>
	<dxarea>Direct3D</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
  <yearadded>2004</yearadded>
  <monthadded>12</monthadded>
	<description>
	<![CDATA[The sample is a demonstration of a database-driven application configuration system.  Device capabilities exposed by drivers are not always correct or provide acceptable performance.  A configuration database stores a list of devices and custom, application-defined overrides to apply for each of the devices.  This allows developers to fine-tune what features to use with any device to the greatest extent.]]>
	</description>
	<folder>Samples\C++\Direct3D\ConfigSystem\</folder>
	<exefolder>Samples\C++\Direct3D\Bin\</exefolder>
	<exe>ConfigSystem.exe</exe>
  	<doc>Documentation/DirectX9/directx_sdk.chm::/config_system_sample.htm</doc>  	     
	<screenshot>ConfigSystem.jpg</screenshot>
	<projectfile7>ConfigSystem.sln</projectfile7>
	<install dxut="true">
		<media>Misc\cell.x</media>
		<media>Misc\cellceiling.jpg</media>
		<media>Misc\cellfloor.jpg</media>
		<media>Misc\cellwall.jpg</media>
	</install>
	<language>C++</language>
	<complexity>1800</complexity>
	<keywords>
		<keyword>IDirect3DDevice9</keyword>
		<keyword>IDirectSound</keyword>
		<keyword>IDirect3D9</keyword>
	</keywords>
    <visible>true</visible>
</sample>

<sample>
	<name>Graphics Card Capabilities</name>
	<dxarea>Articles</dxarea>
	<dxsubarea></dxsubarea>
	<type>article</type>
    <yearadded>2009</yearadded>
    <monthadded>7</monthadded>
	<description>
	<![CDATA[This is a collection of the capabilities exposed by current drivers under DirectX 9.0c, Direct3D 10, and Direct3D 11 on a wide range of graphics hardware available on the market today. A number of software rasterizers have also been included for reference. This data has been arranged in a poster format so that it can be easily printed and laminated. The cards used to collect this data were a general cross section of the market and should not be considered complete. Every effort was made to make sure that major classes of hardware were covered and specific information useful to game developers was displayed. Each of these cards has many more capabilities for DirectDraw and numerous other capabilities for surfaces that are not shown on the poster, applications should always make sure each feature they use is supported by a given pieces of hardware or driver.  NOTE: These documents require applications that can view Adobe PDF or Microsoft Excel documents.]]>
	</description>
	<folder>Samples\C++\Direct3D\ConfigSystem\</folder>
  	<PDF>CardCaps.pdf</PDF>  	     
  	<XLS>CardCaps.xls</XLS>  	     
	<screenshot>CardCaps.jpg</screenshot>
	<language>C++</language>
	<complexity>1800</complexity>
	<keywords>
	</keywords>
    <visible>true</visible>
</sample>

<sample>
	<name>CustomUI</name>
	<dxarea>Direct3D</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
  <yearadded>2004</yearadded>
  <monthadded>7</monthadded>
	<description>
	<![CDATA[This sample showcases the user interface features of the Direct3D 9 sample framework.  The sample framework provides UI controls that applications can readily use.  The supported controls include buttons, radio buttons, check boxes, combo boxes, edit boxes, sliders, and edit boxes with Input Method Editor (IME) functionality.]]>
	</description>
	<folder>Samples\C++\Direct3D\CustomUI\</folder>
	<exefolder>Samples\C++\Direct3D\Bin\</exefolder>
	<exe>CustomUI.exe</exe>
	<screenshot>CustomUI.jpg</screenshot>
  	<doc>Documentation/DirectX9/directx_sdk.chm::/customui_sample.htm</doc>  	     
	<projectfile6>CustomUI.dsw</projectfile6>
	<projectfile7>CustomUI.sln</projectfile7>
	<install dxut="true">
		<media>misc\cell.x</media>
		<media>misc\cellceiling.jpg</media>
		<media>misc\cellfloor.jpg</media>
		<media>misc\cellwall.jpg</media>
	</install>
	<language>C++</language>
	<complexity>800</complexity>
	<keywords>
		<keyword>IDirect3DDevice9</keyword>
		<keyword>IDirect3D9</keyword>
	</keywords>
<visible>true</visible></sample>
<sample>
	<name>DepthOfField</name>
	<dxarea>Direct3D</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
  <yearadded>2002</yearadded>
  <monthadded>10</monthadded>
	<description>
	<![CDATA[This sample shows a technique for creating a depth-of-field effect with Direct3D 9, in which objects are only in focus at a given distance from the camera, and are out of focus at other distances.]]>
	</description>
	<folder>Samples\C++\Direct3D\DepthOfField\</folder>
	<exefolder>Samples\C++\Direct3D\Bin\</exefolder>
	<exe>DepthOfField.exe</exe>
	<screenshot>DepthOfField.jpg</screenshot>
  	<doc>Documentation/DirectX9/directx_sdk.chm::/depthoffield_sample.htm</doc>  	     
	<projectfile6>DepthOfField.dsw</projectfile6>
	<projectfile7>DepthOfField.sln</projectfile7>
	<install dxut="true">
		<media>Tiger</media>
		<media>Misc\sphere.x</media>
		<media>Earth\earth.bmp</media>
	</install>
	<language>C++</language>
	<complexity>2530</complexity>
	<keywords>
		<keyword>IDirect3DDevice9</keyword>
		<keyword>IDirect3D9</keyword>
	</keywords>
<visible>true</visible></sample>
<sample>
	<name>EffectParam</name>
	<dxarea>Direct3D</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
  <yearadded>2004</yearadded>
  <monthadded>7</monthadded>
	<description>
	<![CDATA[This sample shows two features in the Direct3D 9 Extension effect framework: parameter blocks and parameter sharing. Parameter blocks group multiple Setxxx() calls and associate them with an effect handle, allowing an application to easily set those parameters contained in the block with a single API call. Parameter sharing lets parameters in multiple effect objects stay synchronized, so that when an application updates a parameter in one effect object, the corresponding parameter in all other effect objects are updated.]]>
	</description>
	<folder>Samples\C++\Direct3D\EffectParam\</folder>
	<exefolder>Samples\C++\Direct3D\Bin\</exefolder>
	<exe>EffectParam.exe</exe>
	<screenshot>EffectParam.jpg</screenshot>
  	<doc>Documentation/DirectX9/directx_sdk.chm::/effectparam_sample.htm</doc>  	     
	<projectfile6>EffectParam.dsw</projectfile6>
	<projectfile7>EffectParam.sln</projectfile7>
	<install dxut="true">
		<media>Earth\earth.bmp</media>
		<media>Lobby\LobbyCube.dds</media>
		<media>Lobby\lobby_skybox.x</media>
		<media>Dwarf\Armor.dds</media>
		<media>Dwarf\armor_bumpmap.dds</media>
		<media>Dwarf\body.dds</media>
		<media>Dwarf\body_bumpmap.dds</media>
		<media>Dwarf\dwarf.x</media>
		<media>Dwarf\dwarfhead.dds</media>
		<media>Dwarf\dwarfhead_bumpmap.dds</media>
		<media>Dwarf\dwarfwitheffectinstance.x</media>
		<media>Dwarf\headgear.dds</media>
		<media>Dwarf\headgear_bumpmap.dds</media>
		<media>Dwarf\helmet.dds</media>
		<media>Dwarf\helmet_bumpmap.dds</media>
		<media>Dwarf\pack.dds</media>
		<media>Dwarf\pack_bumpmap.dds</media>
		<media>Dwarf\reflect.fx</media>
		<media>Dwarf\specular.fx</media>
		<media>Dwarf\weapons.dds</media>
		<media>Dwarf\weapons_bumpmap.dds</media>
	</install>
	<language>C++</language>
	<complexity>1000</complexity>
	<keywords>
		<keyword>IDirect3DDevice9</keyword>
		<keyword>IDirect3D9</keyword>
		<keyword>ID3DXEffect</keyword>
	</keywords>
<visible>true</visible></sample>
<sample>
	<name>EmptyProject</name>
	<dxarea>Direct3D</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
  <yearadded>2004</yearadded>
  <monthadded>7</monthadded>
	<description>
	<![CDATA[Minimal starting point for new Direct3D 9 applications]]>
	</description>
	<folder>Samples\C++\Direct3D\EmptyProject\</folder>
	<exefolder>Samples\C++\Direct3D\Bin\</exefolder>
	<exe>EmptyProject.exe</exe>
	<screenshot>EmptyProject.jpg</screenshot>
  	<doc>Documentation/DirectX9/directx_sdk.chm::/emptyproject_sample.htm</doc>  	     
	<projectfile7>EmptyProject.sln</projectfile7>
	<install dxut="true"/>
	<language>C++</language>
	<complexity>20</complexity>
	<keywords>
		<keyword>IDirect3DDevice9</keyword>
		<keyword>IDirect3D9</keyword>
	</keywords>
<visible>true</visible></sample>
<sample>
	<name>HDRCubeMap</name>
	<dxarea>Direct3D</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
  <yearadded>2003</yearadded>
  <monthadded>9</monthadded>
	<description>
	<![CDATA[This sample demonstrates cubic environment-mapping with floating-point cube textures and high dynamic range lighting. DirectX 9.0's new floating-point textures can store color values higher than 1.0, which can make lighting effects more realistic on the environment-mapped geometry when the material absorbs part of the light. Note that not all cards support all features for the environment-mapping and high dynamic range lighting techniques.]]>
	</description>
	<folder>Samples\C++\Direct3D\HDRCubeMap\</folder>
	<exefolder>Samples\C++\Direct3D\Bin\</exefolder>
	<exe>HDRCubeMap.exe</exe>
	<screenshot>HDRCubeMap.jpg</screenshot>
  	<doc>Documentation/DirectX9/directx_sdk.chm::/hdrcubemap_sample.htm</doc>  	     
	<projectfile6>HDRCubeMap.dsw</projectfile6>
	<projectfile7>HDRCubeMap.sln</projectfile7>
	<install dxut="true">
		<media>Misc\car.x</media>
		<media>Misc\env2.bmp</media>
		<media>Misc\floor.bmp</media>
		<media>Misc\ground2.bmp</media>
		<media>Misc\seafloor.bmp</media>
		<media>Misc\skullocc.x</media>
		<media>Misc\sphere0.x</media>
		<media>Misc\teapot.x</media>
		<media>Airplane</media>
	</install>
	<language>C++</language>
	<complexity>1750</complexity>
	<keywords>
		<keyword>IDirect3DDevice9</keyword>
		<keyword>IDirect3D9</keyword>
		<keyword>IDirect3DCubeTexture9</keyword>
	</keywords>
<visible>true</visible></sample>
<sample>
	<name>HDRFormats</name>
	<dxarea>Direct3D</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
  <yearadded>2004</yearadded>
  <monthadded>7</monthadded>
	<description>
	<![CDATA[High dynamic range lighting effects require the ability to work with color values beyond the 0 to 255 range, usually by storing high range color data in textures. Floating point texture formats are the natural choice for HDR applications, but may not be available on all target systems. This sample shows how high dynamic range data can be encoded into integer formats for compatibility across a wide range of devices.]]>
	</description>
	<folder>Samples\C++\Direct3D\HDRFormats\</folder>
	<exefolder>Samples\C++\Direct3D\Bin\</exefolder>
	<exe>HDRFormats.exe</exe>
	<screenshot>HDRFormats.jpg</screenshot>
  	<doc>Documentation/DirectX9/directx_sdk.chm::/hdrformats_sample.htm</doc>  	     
	<projectfile6>HDRFormats.dsw</projectfile6>
	<projectfile7>HDRFormats.sln</projectfile7>
	<install dxut="true">
		<media>Misc\teapot.x</media>
        <media>Light Probes\uffizi_cross.dds</media>
	</install>
	<language>C++</language>
	<complexity>2100</complexity>
<visible>true</visible></sample>
<sample>
	<name>HDRLighting</name>
	<dxarea>Direct3D</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
  <yearadded>2003</yearadded>
  <monthadded>9</monthadded>
	<description>
	<![CDATA[This sample demonstrates some high dynamic range lighting effects using floating point textures. Integer texture formats have a limited range of discrete values, which results in lost color information under dynamic lighting conditions; conversely, floating point formats can store very small or very large color values, including values beyond the displayable 0.0 to 1.0 range. This flexibility allows for dynamic lighting effects, such as blue-shifting under low lighting and blooming under intense lighting. This sample also employs a simple light adaptation model, under which the camera is momentarily over-exposed or under-exposed to changing light conditions.]]>
	</description>
	<folder>Samples\C++\Direct3D\HDRLighting\</folder>
	<exefolder>Samples\C++\Direct3D\Bin\</exefolder>
	<exe>HDRLighting.exe</exe>
	<screenshot>HDRLighting.jpg</screenshot>
  	<doc>Documentation/DirectX9/directx_sdk.chm::/hdrlighting_sample.htm</doc>  	     
	<projectfile6>HDRLighting.dsw</projectfile6>
	<projectfile7>HDRLighting.sln</projectfile7>
	<install dxut="true">
		<media>Misc\env2.bmp</media>
		<media>Misc\ground2.bmp</media>
		<media>Misc\seafloor.bmp</media>
		<media>Misc\env3.bmp</media>
		<media>Misc\sphere0.x</media>
	</install>
	<language>C++</language>
	<complexity>2900</complexity>
	<keywords>
		<keyword>IDirect3DDevice9</keyword>
		<keyword>IDirect3D9</keyword>
	</keywords>
<visible>true</visible></sample>
<sample>
  <name>HDRPipeline</name>
  <dxarea>Direct3D</dxarea>
  <type>sample</type>
  <yearadded>2005</yearadded>
  <monthadded>12</monthadded>
  <description><![CDATA[This sample, contributed by Jack Hoxley (a Microsoft Most Valuable Professional), demonstrates the numerous steps that occur "behind the scenes" in a High Dynamic Range rendering pipeline. Intended as an educational sample to complement existing examples, this implementation's difference is that it shows the results of all the intermediary stages and allows the user to change the parameters and get immediate feedback via the GUI.]]></description>
  <folder>Samples\C++\Direct3D\HDRPipeline\</folder>
  <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
  <exe>HDRPipeline.exe</exe>
  <screenshot>HDRPipeline.jpg</screenshot>	 
  	<doc>Documentation/DirectX9/directx_sdk.chm::/hdrpipeline_sample.htm</doc>  	    
  <projectfile7>HDRPipeline_2003.sln</projectfile7>
  <install dxut="true">
	<media>misc</media>
  </install>
  <language>C++</language>
  <complexity>1800</complexity>
  <keywords>
    <keyword>IDirect3DDevice9</keyword>
    <keyword>IDirect3D9</keyword>
  </keywords>
  <visible>true</visible>
</sample><sample>
  <name>HLSLwithoutEffects</name>
  <dxarea>Direct3D</dxarea>
  <type>sample</type>
  <yearadded>2003</yearadded>
  <monthadded>9</monthadded>
  <description><![CDATA[This sample shows some of the effects that can be achieved using vertex shaders written in Microsoft Direct3D 9's High-Level Shader Language (HLSL). HLSL shaders have C-like syntax and constructs, such as functions, expressions, statements, and data types. A vertex shader looks very similar to a C function, and is executed by the 3D device once per every vertex processed to affect the properties of the vertex.  Note that not all cards may support all the various features vertex shaders.  For more information on vertex shaders, refer to the DirectX SDK documentation.]]></description>
  <folder>Samples\C++\Direct3D\HLSLwithoutEffects\</folder>
  <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
  <exe>HLSLwithoutEffects.exe</exe>
  <screenshot>HLSLwithoutEffects.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/hlslwithouteffects_sample.htm</doc>  	     
  <projectfile6>HLSLwithoutEffects.dsw</projectfile6>
  <projectfile7>HLSLwithoutEffects.sln</projectfile7>
  <install dxut="true"/>
  <language>C++</language>
  <complexity>170</complexity>
  <keywords>
    <keyword>IDirect3DDevice9</keyword>
    <keyword>IDirect3D9</keyword>
  </keywords>
<visible>true</visible></sample><sample>
	<name>Instancing</name>
	<dxarea>Direct3D</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
  <yearadded>2004</yearadded>
  <monthadded>10</monthadded>
	<description>
	<![CDATA[This sample demonstrates the new instancing feature available in DirectX 9.0c and shows alternate ways of achieving results similar to hardware instancing.]]>
	</description>
	<folder>Samples\C++\Direct3D\Instancing\</folder>
	<exefolder>Samples\C++\Direct3D\Bin\</exefolder>
	<exe>Instancing.exe</exe>
	<screenshot>Instancing.jpg</screenshot>
  	<doc>Documentation/DirectX9/directx_sdk.chm::/Instancing_sample.htm</doc>  	     
	<projectfile6>Instancing.dsw</projectfile6>
	<projectfile7>Instancing.sln</projectfile7>
	<install dxut="true">
		<media>Misc\\env2.bmp</media>
	</install>
	<language>C++</language>
	<complexity>2650</complexity>
	<keywords>
		<keyword>IDirect3DDevice9</keyword>
		<keyword>IDirect3D9</keyword>
	</keywords>
<visible>true</visible></sample>
<sample>
	<visible>true</visible>
	<name>IrradianceVolume</name>
	<dxarea>Direct3D</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
  <yearadded>2005</yearadded>
  <monthadded>9</monthadded>
	<description>
	<![CDATA[This sample donated by ATI Technologies (www.ati.com) builds upon the PRTDemo Sample and adds preprocessing of the scene to create a volume of radiance samples stored in an octree. This technique allows a PRT object to use the local lighting environment as it moves through a scene. This sample includes a default data set for user experimentation but can be changed to use your own data sets.]]>
	</description>
	<folder>Samples\C++\Direct3D\IrradianceVolume\</folder>
	<exefolder>Samples\C++\Direct3D\Bin\</exefolder>
	<exe>IrradianceVolume.exe</exe>
	<screenshot>IrradianceVolume.jpg</screenshot>
  	<doc>Documentation/DirectX9/directx_sdk.chm::/IrradianceVolume_sample.htm</doc>  	     
	<projectfile6>IrradianceVolume.dsw</projectfile6>
	<projectfile7>IrradianceVolume.sln</projectfile7>
	<install dxut="true">
		<media>Misc\shapes1.x</media>
		<media>Light Probes\rnl_cross.dds</media>
		<media>Light Probes\uffizi_cross.dds</media>
		<media>Light Probes\galileo_cross.dds</media>
		<media>Light Probes\grace_cross.dds</media>
		<media>Light Probes\stpeters_cross.dds</media>
		<media>PRT Demo\bricks_clay_02_512x512.JPG</media>
		<media>PRT Demo\cobblestone_quad_01.JPG</media>
		<media>PRT Demo\column_tan_256x512_03.JPG</media>
		<media>PRT Demo\cube_on_plane.x</media>
		<media>PRT Demo\greyBricks-lighter-512x512.JPG</media>
		<media>PRT Demo\Head.jpg</media>
		<media>PRT Demo\Head_Big_Ears.x</media>
		<media>PRT Demo\Head_Sad.x</media>
		<media>PRT Demo\LandShark.x</media>
		<media>PRT Demo\Speeder_bump.jpg</media>
		<media>PRT Demo\Speeder_diff.jpg</media>
		<media>PRT Demo\wall_with_pillars.x</media>
	</install>
	<language>C++</language>
	<complexity>2750</complexity>
	<keywords>
		<keyword>IDirect3DDevice9</keyword>
		<keyword>IDirect3D9</keyword>
	</keywords>
</sample>
<sample>
	<visible>true</visible>
	<name>LocalDeformablePRT</name>
	<dxarea>Direct3D</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
  <yearadded>2004</yearadded>
  <monthadded>12</monthadded>
	<description>
	<![CDATA[This sample demonstrates a simple usage of Local-deformable precomputed radiance transfer (LDPRT). This implementation does not require an offline simulator for calculating PRT coefficients; instead, the coefficients are calculated from a 'thickness' texture. This allows an artist to create and tweak sub-surface scattering PRT data in an intuitive way.]]>
	</description>
	<folder>Samples\C++\Direct3D\LocalDeformablePRT\</folder>
	<exefolder>Samples\C++\Direct3D\Bin\</exefolder>
	<exe>LocalDeformablePRT.exe</exe>
	<doc>Documentation/DirectX9/directx_sdk.chm::/localdeformableprt_sample.htm</doc>  	     
	<screenshot>LocalDeformablePRT.jpg</screenshot>
  	<projectfile7>LocalDeformablePRT_2003.sln</projectfile7>
	<install dxut="true">
		<media>Light Probes\rnl_cross.dds</media>
	</install>
	<language>C++</language>
	<complexity>2000</complexity>
	<keywords>
		<keyword>LDPRT</keyword>
		<keyword>IDirect3DDevice9</keyword>
		<keyword>IDirect3D9</keyword>
	</keywords>
</sample>
<sample>
	<name>MeshFromOBJ</name>
	<dxarea>Direct3D</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
  <yearadded>2004</yearadded>
  <monthadded>7</monthadded>
	<description>
	<![CDATA[This sample shows how an ID3DXMesh object can be created from mesh data stored in a Wavefront Object file (
.obj). It's convenient to use X-Files (.x) when working with ID3DXMesh objects since 
D3DX can create and fill an ID3DXMesh object directly from an .x file; however, it's also easy to initialize an ID3DXMesh object with data gathered from any file format or memory resource. ]]>
	</description>
	<folder>Samples\C++\Direct3D\MeshFromOBJ\</folder>
	<exefolder>Samples\C++\Direct3D\Bin\</exefolder>
	<exe>MeshFromOBJ.exe</exe>
	<screenshot>MeshFromOBJ.gif</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/meshfromobj_sample.htm</doc>  	     
	<projectfile6>MeshFromOBJ.dsw</projectfile6>
	<projectfile7>MeshFromOBJ.sln</projectfile7>
	<install dxut="true"/>
	<language>C++</language>
	<complexity>1500</complexity>
	<keywords>
		<keyword>IDirect3DDevice9</keyword>
		<keyword>IDirect3D9</keyword>
	</keywords>
<visible>true</visible></sample>
<sample>
	<name>MultiAnimation</name>
	<dxarea>Direct3D</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
  <yearadded>2003</yearadded>
  <monthadded>9</monthadded>
	<description>
	<![CDATA[This sample demonstrates mesh animation with multiple animation sets using HLSL skinning and D3DX's animation controller. It shows how an application can render 3D animation by utilizing D3DX's animation support. D3DX has APIs that handles the loading of the animatable mesh, as well as the blending of multiple animations. The animation controller supports animation tracks for this purpose, and allows transitioning from one animation to another smoothly.]]>
	</description>
	<folder>Samples\C++\Direct3D\MultiAnimation\</folder>
	<exefolder>Samples\C++\Direct3D\Bin\</exefolder>
	<exe>MultiAnimation.exe</exe>
	<screenshot>MultiAnimation.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/multianimation_sample.htm</doc>  	     
	<projectfile6>MultiAnimation.dsw</projectfile6>
	<projectfile7>MultiAnimation.sln</projectfile7>
	<install dxut="true">
		<media>Tiny\\Tiny_skin.dds</media>
	</install>
	<language>C++</language>
	<complexity>2700</complexity>
	<keywords>
		<keyword>IDirect3DDevice9</keyword>
		<keyword>IDirect3D9</keyword>
		<keyword>ID3DXAnimationController</keyword>
		<keyword>ID3DXAllocateHierarchy</keyword>
		<keyword>ID3DXAnimationCallbackHandler</keyword>
		<keyword>ID3DXAnimationSet</keyword>
		<keyword>ID3DXCompressedAnimationSet</keyword>
		<keyword>ID3DXSkinInfo</keyword>
	</keywords>
<visible>true</visible></sample>
<sample>
  <name>OptimizedMesh</name>
  <dxarea>Direct3D</dxarea>
  <dxsubarea>Meshes</dxsubarea>
  <type>sample</type>
  <yearadded>2004</yearadded>
  <monthadded>7</monthadded>
  <description><![CDATA[The OptimizedMesh sample illustrates how to load and optimize a file-based mesh using the D3DX mesh utility functions.  For more info on D3DX, refer to the DirectX SDK documentation.]]></description>
  <folder>Samples\C++\Direct3D\OptimizedMesh\</folder>
  <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
  <exe>OptimizedMesh.exe</exe>
  <screenshot>OptimizedMesh.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/optimizedmesh_sample.htm</doc>  	     
  <projectfile6>OptimizedMesh.dsw</projectfile6>
  <projectfile7>OptimizedMesh.sln</projectfile7>
  <install dxut="true">
    <media>Misc\knot.x</media>
  </install>
  <language>C++</language>
  <complexity>1110</complexity>
  <keywords>
    <keyword>IDirect3DDevice9</keyword>
    <keyword>IDirect3D9</keyword>
  </keywords>
<visible>true</visible></sample><sample>
	<name>ParallaxOcclusionMapping</name>
	<dxarea>Direct3D</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2006</yearadded>
    <monthadded>4</monthadded>
	<description>
	<![CDATA[This sample donated by ATI Technologies (www.ati.com) presents the parallax occlusion mapping algorithm which employs per-pixel ray-tracing for dynamic lighting of surfaces in real-time on the GPU. The method uses a high precision algorithm for approximating view-dependent surface extrusion for a given height field to simulate motion parallax and perspective-correct depth. Additionally, the method allows generation of soft shadows in real-time for surface occlusions. This sample includes an automatic level-of-detail system for in-shader complexity scaling.]]>
	</description>
	<folder>Samples\C++\Direct3D\ParallaxOcclusionMapping\</folder>
	<exefolder>Samples\C++\Direct3D\Bin\</exefolder>
	<exe>ParallaxOcclusionMapping.exe</exe>
	<screenshot>ParallaxOcclusionMapping.jpg</screenshot>
  	<doc>Documentation/DirectX9/directx_sdk.chm::/ParallaxOcclusionMapping_sample.htm</doc>  	     
	<projectfile6>ParallaxOcclusionMapping.dsw</projectfile6>
	<projectfile7>ParallaxOcclusionMapping.sln</projectfile7>
	<install dxut="true">
		<media>Tiny</media>
	</install>
	<language>C++</language>
	<complexity>1750</complexity>
	<keywords>
		<keyword>IDirect3DDevice9</keyword>
		<keyword>IDirect3D9</keyword>
	</keywords>
<visible>true</visible></sample>
<sample>
  <name>Pick</name>
  <dxarea>Direct3D</dxarea>
  <type>sample</type>
  <yearadded>2005</yearadded>
  <monthadded>12</monthadded>
  <description><![CDATA[This samples illustrates picking using Direct3D 9.]]></description>
  <folder>Samples\C++\Direct3D\Pick\</folder>
  <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
  <exe>Pick.exe</exe>
  <screenshot>Pick.jpg</screenshot>	     
  <projectfile7>Pick_2003.sln</projectfile7>
  <install dxut="true">
	<media>Scanner</media>
  </install>
  <language>C++</language>
  <complexity>900</complexity>
  <keywords>
    <keyword>IDirect3DDevice9</keyword>
    <keyword>IDirect3D9</keyword>
  </keywords>
  <visible>true</visible>
</sample><sample>
	<name>PixelMotionBlur</name>
	<dxarea>Direct3D</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
  <yearadded>2003</yearadded>
  <monthadded>9</monthadded>
	<description>
	<![CDATA[This sample shows how to do a motion blur effect using floating point textures and multiple render targets.  The first pass renders the scene to the first render target and writes the velocity of each pixel to the second render target.  Then it renders a full screen quad and uses a pixel shader to look up the velocity of that pixel and blurs the pixel based on the velocity.]]>
	</description>
	<folder>Samples\C++\Direct3D\PixelMotionBlur\</folder>
	<exefolder>Samples\C++\Direct3D\Bin\</exefolder>
	<exe>PixelMotionBlur.exe</exe>
	<screenshot>PixelMotionBlur.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/PixelMotionBlur_sample.htm</doc>  	     
	<projectfile6>PixelMotionBlur.dsw</projectfile6>
	<projectfile7>PixelMotionBlur.sln</projectfile7>
	<install dxut="true">
		<media>Earth\earth.bmp</media>
		<media>Misc\env2.bmp</media>
		<media>Misc\floor.bmp</media>
		<media>Misc\seafloor.bmp</media>
		<media>Misc\sphere.x</media>
	</install>
	<language>C++</language>
	<complexity>2530</complexity>
	<keywords>
		<keyword>IDirect3DDevice9</keyword>
		<keyword>IDirect3D9</keyword>
	</keywords>
<visible>true</visible></sample>
<sample>
	<name>PostProcess</name>
	<dxarea>Direct3D</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
  <yearadded>2004</yearadded>
  <monthadded>7</monthadded>
	<description>
	<![CDATA[This sample demonstrates some interesting image-processing effects that can be achieved interactively. Traditionally, image-processing takes a significant amount of processor power on the host CPU, and is usually done offline. With pixel shaders, these effects can now be performed on the 3D hardware more efficiently, allowing them to be applied in real-time.]]>
	</description>
	<folder>Samples\C++\Direct3D\PostProcess\</folder>
	<exefolder>Samples\C++\Direct3D\Bin\</exefolder>
	<exe>PostProcess.exe</exe>
	<screenshot>PostProcess.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/PostProcess_sample.htm</doc>  	     
	<projectfile6>PostProcess.dsw</projectfile6>
	<projectfile7>PostProcess.sln</projectfile7>
	<install dxut="true">
		<media>Misc\skullocc.x</media>
		<media>Dwarf</media>
		<media>Light Probes\uffizi_cross.dds</media>
	</install>
	<language>C++</language>
	<complexity>2530</complexity>
	<keywords>
		<keyword>IDirect3DDevice9</keyword>
		<keyword>IDirect3D9</keyword>
	</keywords>
<visible>true</visible></sample>
<sample>
	<visible>true</visible>
	<name>PRTCmdLine</name>
	<dxarea>Direct3D</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
  <yearadded>2005</yearadded>
  <monthadded>2</monthadded>
	<description>
  <![CDATA[PRTCmdLine is a command line example tool that uses a D3DDEVTYPE_NULLREF Direct3D 9 device and an 'XML' options file to run the PRT simulator.  The output can be viewed in a PRT application such as the PRTDemo sample.]]>	
  </description>
	<folder>Samples\C++\Direct3D\PRTCmdLine\</folder>
	<exe>PRTCmdLine.exe</exe>
	<exefolder>Samples\C++\Direct3D\Bin\</exefolder>
	<screenshot>PRTCmdLine.jpg</screenshot>
	<projectfile6>PRTCmdLine.dsw</projectfile6>
	<projectfile7>PRTCmdLine.sln</projectfile7>
	<install dxut="true">
		<media>Misc\shapes1.x</media>
		<media>Light Probes\rnl_cross.dds</media>
		<media>Light Probes\uffizi_cross.dds</media>
		<media>Light Probes\galileo_cross.dds</media>
		<media>Light Probes\grace_cross.dds</media>
		<media>Light Probes\stpeters_cross.dds</media>
		<media>PRT Demo\bricks_clay_02_512x512.JPG</media>
		<media>PRT Demo\cobblestone_quad_01.JPG</media>
		<media>PRT Demo\column_tan_256x512_03.JPG</media>
		<media>PRT Demo\cube_on_plane.x</media>
		<media>PRT Demo\greyBricks-lighter-512x512.JPG</media>
		<media>PRT Demo\Head.jpg</media>
		<media>PRT Demo\Head_Big_Ears.x</media>
		<media>PRT Demo\Head_Sad.x</media>
		<media>PRT Demo\LandShark.x</media>
		<media>PRT Demo\Speeder_bump.jpg</media>
		<media>PRT Demo\Speeder_diff.jpg</media>
		<media>PRT Demo\wall_with_pillars.x</media>
	</install>
	<language>C++</language>
	<consoleapp>yes</consoleapp>
	<complexity>2000</complexity>
	<keywords>
		<keyword>IDirect3DDevice9</keyword>
		<keyword>IDirect3D9</keyword>
	</keywords>
</sample>
<sample>
	<visible>true</visible>
	<name>PRTDemo</name>
	<dxarea>Direct3D</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
  <yearadded>2004</yearadded>
  <monthadded>12</monthadded>
	<description>
	<![CDATA[This sample features several scenes which compare precomputed radiance transfer (PRT) implementations against the standard lighting equations.]]>
	</description>
	<folder>Samples\C++\Direct3D\PRTDemo\</folder>
	<exefolder>Samples\C++\Direct3D\Bin\</exefolder>
	<exe>PRTDemo.exe</exe>
	<screenshot>PRTDemo.jpg</screenshot>
  	<doc>Documentation/DirectX9/directx_sdk.chm::/PRT_Demo_sample.htm</doc>  	     
	<projectfile6>PRTDemo.dsw</projectfile6>
	<projectfile7>PRTDemo.sln</projectfile7>
	<install dxut="true">
		<media>Misc\shapes1.x</media>
		<media>Light Probes\rnl_cross.dds</media>
		<media>Light Probes\uffizi_cross.dds</media>
		<media>Light Probes\galileo_cross.dds</media>
		<media>Light Probes\grace_cross.dds</media>
		<media>Light Probes\stpeters_cross.dds</media>
		<media>PRT Demo\bricks_clay_02_512x512.JPG</media>
		<media>PRT Demo\cobblestone_quad_01.JPG</media>
		<media>PRT Demo\column_tan_256x512_03.JPG</media>
		<media>PRT Demo\cube_on_plane.x</media>
		<media>PRT Demo\greyBricks-lighter-512x512.JPG</media>
		<media>PRT Demo\Head.jpg</media>
		<media>PRT Demo\Head_Big_Ears.x</media>
		<media>PRT Demo\Head_Sad.x</media>
		<media>PRT Demo\LandShark.x</media>
		<media>PRT Demo\Speeder_bump.jpg</media>
		<media>PRT Demo\Speeder_diff.jpg</media>
		<media>PRT Demo\wall_with_pillars.x</media>
	</install>
	<language>C++</language>
	<complexity>2550</complexity>
	<keywords>
		<keyword>IDirect3DDevice9</keyword>
		<keyword>IDirect3D9</keyword>
	</keywords>
</sample>
<sample>
	<name>ShadowMap</name>
	<dxarea>Direct3D</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
  <yearadded>2004</yearadded>
  <monthadded>7</monthadded>
	<description>
	<![CDATA[This sample demonstrates one popular shadow technique called shadow mapping. A shadow map, in the form of a floating-point texture, is written with depth information of the scene as if the camera is looking out from the light. Then, the shadow map is project onto the scene during rendering. The depth values in the scene are compared with those in the shadow map. If they do not match for a particular pixel, then that pixel is in shadow. This approach allows very efficient real-time shadow casting.]]>
	</description>
	<folder>Samples\C++\Direct3D\ShadowMap\</folder>
	<exefolder>Samples\C++\Direct3D\Bin\</exefolder>
	<exe>ShadowMap.exe</exe>
	<screenshot>ShadowMap.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/ShadowMap_sample.htm</doc>  	     
	<projectfile6>ShadowMap.dsw</projectfile6>
	<projectfile7>ShadowMap.sln</projectfile7>
	<install dxut="true">
		<media>Misc\seafloor.bmp</media>
		<media>Misc\sphere.x</media>
		<media>Airplane</media>
		<media>Misc\car.x</media>
		<media>Misc\env2.bmp</media>
		<media>Misc\floor.bmp</media>
		<media>Misc\ground2.bmp</media>
		<media>UI\arrow.x</media>
	</install>
	<language>C++</language>
	<complexity>1200</complexity>
	<keywords>
		<keyword>IDirect3DDevice9</keyword>
		<keyword>IDirect3D9</keyword>
	</keywords>
<visible>true</visible></sample>
<sample>
	<name>ShadowVolume</name>
	<dxarea>Direct3D</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
  <yearadded>2004</yearadded>
  <monthadded>7</monthadded>
	<description>
	<![CDATA[The sample demonstrates one common technique for rendering real-time shadows called shadow volumes. The shadows in the sample work by extruding faces of the occluding geometry that are facing away from light to form a volume that represents the shadowed area in 3D space and utilizing the stencil buffer of the 3D device. Stencil buffer is a buffer that can be updated as geometry is rendered, and then used as a mask for rendering additional geometry. Common stencil effects include mirrors, shadows (an advanced technique), and dissolves.]]>
	</description>
	<folder>Samples\C++\Direct3D\ShadowVolume\</folder>
	<exefolder>Samples\C++\Direct3D\Bin\</exefolder>
	<exe>ShadowVolume.exe</exe>
	<screenshot>ShadowVolume.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/ShadowVolume_sample.htm</doc>  	     
	<projectfile6>ShadowVolume.dsw</projectfile6>
	<projectfile7>ShadowVolume.sln</projectfile7>
	<install dxut="true">
		<media>Misc\seafloor.x</media>
		<media>Misc\seafloor.bmp</media>
		<media>Misc\sphere0.x</media>
		<media>Airplane</media>
		<media>Misc\cell.x</media>
		<media>Misc\cellceiling.jpg</media>
		<media>Misc\cellfloor.jpg</media>
		<media>Misc\cellwall.jpg</media>
		<media>Dwarf</media>
	</install>
	<language>C++</language>
	<complexity>1300</complexity>
	<keywords>
		<keyword>IDirect3DDevice9</keyword>
		<keyword>IDirect3D9</keyword>
	</keywords>
<visible>true</visible></sample>
<sample>
	<name>SimpleSample</name>
	<dxarea>Direct3D</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
  <yearadded>2005</yearadded>
  <monthadded>7</monthadded>
	<description>
	<![CDATA[Basic starting point for new Direct3D 9 samples]]>
	</description>
	<folder>Samples\C++\Direct3D\SimpleSample\</folder>
	<exefolder>Samples\C++\Direct3D\Bin\</exefolder>
	<exe>SimpleSample.exe</exe>
	<screenshot>SimpleSample.jpg</screenshot>
  	<doc>Documentation/DirectX9/directx_sdk.chm::/simplesample_sample.htm</doc>  	     
	<projectfile7>SimpleSample.sln</projectfile7>
	<install dxut="true"/>
	<language>C++</language>
	<complexity>50</complexity>
	<keywords>
		<keyword>IDirect3DDevice9</keyword>
		<keyword>IDirect3D9</keyword>
	</keywords>
<visible>true</visible></sample>
<sample>
	<name>SkinnedMesh</name>
	<dxarea>Direct3D</dxarea>
	<dxsubarea>Meshes</dxsubarea>
	<type>sample</type>
  <yearadded>2004</yearadded>
  <monthadded>7</monthadded>
	<description>
	<![CDATA[The SkinnedMesh sample shows how to use D3DX to load and display a skinned mesh.]]>
	</description>
	<folder>Samples\C++\Direct3D\SkinnedMesh\</folder>
	<exefolder>Samples\C++\Direct3D\Bin\</exefolder>
	<exe>SkinnedMesh.exe</exe>
	<screenshot>SkinnedMesh.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/SkinnedMesh_sample.htm</doc>  	     
	<projectfile6>SkinnedMesh.dsw</projectfile6>
	<projectfile7>SkinnedMesh.sln</projectfile7>
	<install dxut="true">
		<media>Tiny</media>
		<reserved>UpdateSkinnedMesh</reserved>
	</install>
	<language>C++</language>
	<complexity>2500</complexity>
	<keywords>
		<keyword>IDirect3DDevice9</keyword>
		<keyword>IDirect3D9</keyword>
	</keywords>
<visible>true</visible></sample>
<sample>
	<name>StateManager</name>
	<dxarea>Direct3D</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
  <yearadded>2004</yearadded>
  <monthadded>7</monthadded>
	<description>
	<![CDATA[This sample shows an example implementation of the ID3DXEffectStateManager interface. This inteface can be used to implement custom state-change handling for the D3DX Effects system.]]>
	</description>
	<folder>Samples\C++\Direct3D\StateManager\</folder>
	<exefolder>Samples\C++\Direct3D\Bin\</exefolder>
	<exe>StateManager.exe</exe>
	<screenshot>StateManager.jpg</screenshot>
  	<doc>Documentation/DirectX9/directx_sdk.chm::/statemanager_sample.htm</doc>  	     
	<projectfile6>StateManager.dsw</projectfile6>
	<projectfile7>StateManager.sln</projectfile7>
	<install dxut="true">
		<reserved>D3DXEffectStateManager</reserved>
      		<reserved>SetStateManager</reserved>
	</install>
	<language>C++</language>
	<complexity>1200</complexity>
	<keywords>
	</keywords>
<visible>true</visible></sample>
<sample>
  <name>Text3D</name>
  <dxarea>Direct3D</dxarea>
  <type>sample</type>
  <yearadded>2002</yearadded>
  <monthadded>12</monthadded>
  <description><![CDATA[The Text3D sample shows how to draw 2D text and 3D text in a 3D scene.  This is most useful for display stats, in game menus, etc.]]></description>
  <folder>Samples\C++\Direct3D\Text3D\</folder>
  <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
  <exe>Text3D.exe</exe>
  <screenshot>Text3D.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/Text3D_sample.htm</doc>
  <projectfile6>Text3D.dsw</projectfile6>
  <projectfile7>Text3D.sln</projectfile7>
  <install dxut="true"/>
  <language>C++</language>
  <complexity>100</complexity>
  <keywords>
    <keyword>IDirect3DDevice9</keyword>
    <keyword>IDirect3D9</keyword>
  </keywords>
<visible>true</visible></sample><sample>
	<name>PIXGameDebugging</name>
	<dxarea>Direct3D</dxarea>
	<dxsubarea>Tutorials</dxsubarea>
	<type>tutorial</type>
  <yearadded>2008</yearadded>
  <monthadded>3</monthadded>
	<description>
	<![CDATA[This sample is used to demonstrate common game debugging techniques using PIX for Windows.]]>
	</description>
	<folder>Samples\C++\Direct3D\Tutorials\PIXGameDebugging\</folder>
	<exefolder></exefolder>
	<exe></exe>
	<screenshot>PIXGameDebugging.jpg</screenshot>
  	<doc>Documentation/DirectX9/directx_sdk.chm::/pixgamedebugging_sample.htm</doc>  	     
	<projectfile6></projectfile6>
	<projectfile7>PIXGameDebugging.sln</projectfile7>
	<install dxut="true">
	</install>
	<language>C++</language>
	<complexity>25</complexity>
	<keywords>
		<keyword>IDirect3DDevice9</keyword>
		<keyword>IDirect3D9</keyword>
		<keyword>PIX</keyword>
		<keyword>PIXWin</keyword>
		<keyword>Debugging</keyword>
	</keywords>
<visible>true</visible></sample><sample>
  <name>Tutorial 1: CreateDevice</name>
  <dxarea>Direct3D</dxarea>
  <dxsubarea>Tutorials</dxsubarea>
  <type>tutorial</type>
  <yearadded>2002</yearadded>
  <monthadded>12</monthadded>
  <description><![CDATA[The CreateDevice tutorial is the first tutorial for using the new Direct3D 9 interfaces for DirectX 9.  It shows how to create a Direct3DDevice9 object.]]></description>
  <folder>Samples\C++\Direct3D\Tutorials\Tut01_CreateDevice\</folder>
  <screenshot>Tut01_CreateDevice.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/Tutorial_1___Creating_a_Device.htm</doc>
  <projectfile6>CreateDevice.dsw</projectfile6>
  <projectfile7>CreateDevice.sln</projectfile7>
  <install name="CreateDevice" common="false">
    <reserved>CreateDevice(</reserved>
  </install>
  <language>C++</language>
  <complexity>11</complexity>
  <keywords>
    <keyword>IDirect3DDevice9</keyword>
    <keyword>IDirect3D9</keyword>
  </keywords>
<visible>true</visible></sample><sample>
  <name>Tutorial 2: Vertices</name>
  <dxarea>Direct3D</dxarea>
  <dxsubarea>Tutorials</dxsubarea>
  <type>tutorial</type>
  <yearadded>2002</yearadded>
  <monthadded>12</monthadded>
  <description><![CDATA[The Vertices tutorial demonstrates the necessary API to render vertices using Direct3D 9.]]></description>
  <folder>Samples\C++\Direct3D\Tutorials\Tut02_Vertices\</folder>
  <screenshot>Tut02_Vertices.jpg</screenshot>
<doc>Documentation/DirectX9/directx_sdk.chm::/Tutorial_2___Rendering_Vertices.htm</doc>
  <projectfile6>Vertices.dsw</projectfile6>
  <projectfile7>Vertices.sln</projectfile7>
  <install name="Vertices" common="false" />
  <language>C++</language>
  <complexity>12</complexity>
  <keywords>
    <keyword>IDirect3DDevice9</keyword>
    <keyword>IDirect3D9</keyword>
  </keywords>
<visible>true</visible></sample><sample>
  <name>Tutorial 3: Matrices</name>
  <dxarea>Direct3D</dxarea>
  <dxsubarea>Tutorials</dxsubarea>
  <type>tutorial</type>
  <yearadded>2002</yearadded>
  <monthadded>12</monthadded>
  <description><![CDATA[The Matrices tutorial shows how to use 4x4 matrices to transform vertices in Direct3D 9.]]></description>
  <folder>Samples\C++\Direct3D\Tutorials\Tut03_Matrices\</folder>
  <screenshot>Tut03_Matrices.jpg</screenshot>
<doc>Documentation/DirectX9/directx_sdk.chm::/Tutorial_3___Using_Matrices.htm</doc>
  <projectfile6>Matrices.dsw</projectfile6>
  <projectfile7>Matrices.sln</projectfile7>
  <install name="Matrices" common="false" />
  <language>C++</language>
  <complexity>13</complexity>
  <keywords>
    <keyword>IDirect3DDevice9</keyword>
    <keyword>IDirect3D9</keyword>
  </keywords>
<visible>true</visible></sample><sample>
  <name>Tutorial 4: Lights</name>
  <dxarea>Direct3D</dxarea>
  <dxsubarea>Tutorials</dxsubarea>
  <type>tutorial</type>
  <yearadded>2002</yearadded>
  <monthadded>12</monthadded>
  <description><![CDATA[The Lights tutorial shows how to use dynamic lighting in Direct3D 9.]]></description>
  <folder>Samples\C++\Direct3D\Tutorials\Tut04_Lights\</folder>
  <screenshot>Tut04_Lights.jpg</screenshot>
<doc>Documentation/DirectX9/directx_sdk.chm::/Tutorial_4___Creating_and_Using_Lights.htm</doc>
  <projectfile6>Lights.dsw</projectfile6>
  <projectfile7>Lights.sln</projectfile7>
  <install name="Lights" common="false" />
  <language>C++</language>
  <complexity>14</complexity>
  <keywords>
    <keyword>IDirect3DDevice9</keyword>
    <keyword>IDirect3D9</keyword>
  </keywords>
<visible>true</visible></sample><sample>
  <name>Tutorial 5: Textures</name>
  <dxarea>Direct3D</dxarea>
  <dxsubarea>Tutorials</dxsubarea>
  <type>tutorial</type>
  <yearadded>2002</yearadded>
  <monthadded>12</monthadded>
  <description><![CDATA[The Textures tutorial shows how to use texture mapping in Direct3D 9.]]></description>
  <folder>Samples\C++\Direct3D\Tutorials\Tut05_Textures\</folder>
  <screenshot>Tut05_Textures.jpg</screenshot>
<doc>Documentation/DirectX9/directx_sdk.chm::/Tutorial_5___Using_Texture_Maps.htm</doc>
  <projectfile6>Textures.dsw</projectfile6>
  <projectfile7>Textures.sln</projectfile7>
  <install name="Textures" common="false">
    <reserved>SetTextureStageState</reserved>
  </install>
  <language>C++</language>
  <complexity>15</complexity>
  <keywords>
    <keyword>IDirect3DDevice9</keyword>
    <keyword>IDirect3D9</keyword>
  </keywords>
<visible>true</visible></sample><sample>
  <name>Tutorial 6: Meshes</name>
  <dxarea>Direct3D</dxarea>
  <dxsubarea>Tutorials</dxsubarea>
  <type>tutorial</type>
  <yearadded>2002</yearadded>
  <monthadded>12</monthadded>
  <description><![CDATA[The Mesh tutorial shows how to load and render file-based geometry meshes in Direct3D 9.]]></description>
  <folder>Samples\C++\Direct3D\Tutorials\Tut06_Meshes\</folder>
  <screenshot>Tut06_Meshes.jpg</screenshot>
<doc>Documentation/DirectX9/directx_sdk.chm::/Tutorial_6___Using_Meshes.htm</doc>
  <projectfile6>Meshes.dsw</projectfile6>
  <projectfile7>Meshes.sln</projectfile7>
  <install name="Meshes" common="false" />
  <language>C++</language>
  <complexity>16</complexity>
  <keywords>
    <keyword>IDirect3DDevice9</keyword>
    <keyword>IDirect3D9</keyword>
  </keywords>
<visible>true</visible></sample><sample>
	<visible>true</visible>
	<name>UVAtlas</name>
	<dxarea>Direct3D</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
  <yearadded>2005</yearadded>
  <monthadded>4</monthadded>
	<description>
    <![CDATA[UVAtlas.exe is a command line example tool that uses the D3DX UVAtlas and IMT computation functions to generate an optimal, unique texture parameterization for an input mesh.  See the DirectX docs for more details on the UVAtlas API. ]]>	
    </description>
	<folder>Samples\C++\Direct3D\UVAtlas\</folder>
	<exe>UVAtlas.exe</exe>
	<exefolder>Samples\C++\Direct3D\Bin\</exefolder>
	<screenshot>UVAtlas.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/uvatlas_command_line_tool.htm</doc>
	<projectfile6>UVAtlas.dsw</projectfile6>
	<projectfile7>UVAtlas.sln</projectfile7>
	<install dxut="true">
	    <reserved>D3DXUVAtlasCreate</reserved>
	    <reserved>D3DXUVATLAS_</reserved>
    </install>
    <consoleapp>yes</consoleapp>
	<language>C++</language>
	<complexity>500</complexity>
	<keywords>
		<keyword>IDirect3DDevice9</keyword>
		<keyword>IDirect3D9</keyword>
	</keywords>
</sample>
<sample>
	<name>10BitScanout10</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2009</yearadded>
    <monthadded>8</monthadded>
	<description>
	<![CDATA[This sample produces a linear gray scale test pattern in both 8 and 10 bit color and displays it on multiple monitors to enable direct comparison.]]>
	</description>
	<folder>Samples\C++\Direct3D10\10BitScanout10\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>10BitScanout10.exe</exe>
	<screenshot>10BitScanout10.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_10BitScanout10_sample.htm</doc>	     
	<projectfile7>10BitScanout10_2003.sln</projectfile7>
	<install dxut="true">
	</install>
	<language>C++</language>
	<complexity>200</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    	<visible>true</visible>
</sample>
<sample>
	<name>AdvancedParticles</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2007</yearadded>
    <monthadded>11</monthadded>
	<description>
	<![CDATA[This is one of 3 sample applications shown during the Advanced Real-Time Rendering in 3D Graphics and Games course at SIGGraph 2007.  The Direct3D 10 sample shows a particle system that interacts with its environment.  The system is managed entirely by the GPU.]]>
	</description>
	<folder>Samples\C++\Direct3D10\AdvancedParticles\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>AdvancedParticles.exe</exe>
	<screenshot>AdvancedParticles.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_AdvancedParticles_sample.htm</doc>	     
	<projectfile7>AdvancedParticles_2003.sln</projectfile7>
	<install dxut="true">
		<media>misc</media>
		<media>AdvancedParticles</media>
	</install>
	<language>C++</language>
	<complexity>1500</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    	<visible>true</visible>
</sample>
<sample>
	<name>BasicHLSL10</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2005</yearadded>
    <monthadded>12</monthadded>
	<description>
	<![CDATA[This Direct3D 10 sample shows a simple example of the High-Level Shader Language (HLSL) using the effect interface. This sample also includes a Direct3D 9 fallback]]>
	</description>
	<folder>Samples\C++\Direct3D10\BasicHLSL10\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>BasicHLSL10.exe</exe>
	<screenshot>BasicHLSL.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_basichlsl10_sample.htm</doc>  	     
	<projectfile7>BasicHLSL10_2003.sln</projectfile7>
	<install dxut="true">
		<media>Tiny</media>
	</install>
	<language>C++</language>
	<complexity>100</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>ContentStreaming</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2007</yearadded>
    <monthadded>8</monthadded>
	<description>
	<![CDATA[The ContentStreaming sample demonstrates streaming content in the background for applications that need to display more data than can fit in video or system ram at any given time. This sample supports both Direct3D 9 and Direct3D 10.]]>
	</description>
	<folder>Samples\C++\Direct3D10\ContentStreaming\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>ContentStreaming.exe</exe>
	<screenshot>ContentStreaming.jpg</screenshot>
       	<doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_ContentStreaming_sample.htm</doc>
	<projectfile7>ContentStreaming_2003.sln</projectfile7>
	<install dxut="true">
	    <media>ContentStreaming</media>
	</install>
	<language>C++</language>
	<complexity>2500</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
	<visible>true</visible>
</sample>
<sample>
	<name>CubeMapGS</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2005</yearadded>
    <monthadded>12</monthadded>
	<description>
	<![CDATA[This Direct3D 10 sample shows an example of rendering to all 6 faces of a cube map in one pass.]]>
	</description>
	<folder>Samples\C++\Direct3D10\CubeMapGS\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>CubeMapGS.exe</exe>
	<screenshot>CubeMapGS.jpg</screenshot>	     
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_cubemapgs_sample.htm</doc>  
	<projectfile7>CubeMapGS_2003.sln</projectfile7>
	<install dxut="true">
		<media>misc</media>
		<media>ExoticCar</media>
		<media>Scanner</media>
	</install>
	<language>C++</language>
	<complexity>1050</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    	<visible>true</visible>
</sample>
<sample>
	<name>DDSWithoutD3DX</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2009</yearadded>
    <monthadded>8</monthadded>
	<description>
	<![CDATA[DDS texture loading without using the D3DX helper functions.]]>
	</description>
	<folder>Samples\C++\Direct3D10\DDSWithoutD3DX\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>DDSWithoutD3DX.exe</exe>
	<screenshot>DDSWithoutD3DX.jpg</screenshot>
    <doc>Documentation\DirectX9\directx_sdk.chm::/d3d10_DDSWithoutD3DX_sample.htm</doc>
	<projectfile7>DDSWithoutD3DX_2003.sln</projectfile7>
	<install dxut="true">
	<media>misc</media>
	</install>
	<language>C++</language>
	<complexity>1500</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
		<keyword>DDS</keyword>
	</keywords>
	<visible>true</visible>
</sample>
<sample>
	<name>DeferredParticles</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2008</yearadded>
    <monthadded>8</monthadded>
	<description>
	<![CDATA[This sample shows how to create more volumetric-looking particles using a deferred rendering approach.]]>
	</description>
	<folder>Samples\C++\Direct3D10\DeferredParticles\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>DeferredParticles.exe</exe>
	<screenshot>DeferredParticles.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_DeferredParticles_sample.htm</doc>  	     
	<projectfile7>DeferredParticles_2003.sln</projectfile7>
	<install dxut="true">
		<media>DeferredParticles</media>
	</install>
	<language>C++</language>
	<complexity>1000</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>DepthOfField10.1</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2008</yearadded>
    <monthadded>8</monthadded>
	<description>
	<![CDATA[This Direct3D 10.1 sample, courtesy of AMD, shows how to use depth of field with MSAA on Direct3D 10.1 hardware.]]>
	</description>
	<folder>Samples\C++\Direct3D10\DepthOfField10.1\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>DepthOfField10.1.exe</exe>
	<screenshot>DepthOfField10.1.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_DepthOfField10_1_sample.htm</doc>  	     
	<projectfile7>DepthOfField10.1_2003.sln</projectfile7>
	<install dxut="true">
		<media>MicroscopeCity</media>
	</install>
	<language>C++</language>
	<complexity>700</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>DrawPredicated</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2005</yearadded>
    <monthadded>12</monthadded>
	<description>
	<![CDATA[This Direct3D 10 sample shows the use of predicated Direct3D 10 calls to avoid drawing occluded geometry.]]>
	</description>
	<folder>Samples\C++\Direct3D10\DrawPredicated\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>DrawPredicated.exe</exe>
	<screenshot>DrawPred.jpg</screenshot>    
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_drawpredicated_sample.htm</doc>
	<projectfile7>DrawPredicated_2003.sln</projectfile7>
	<install dxut="true">
		<media>MicroscopeCity</media>
	</install>
	<language>C++</language>
	<complexity>200</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>EffectPools</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2007</yearadded>
    <monthadded>4</monthadded>
	<description>
	<![CDATA[One of the downsides to using multiple effects in a single application is that many effect variables need to be set for each effect.  It is often the case that many of these variables are common between effects.  Without a method for sharing variables or shaders between effects, many rendundant set calls will need to be made setting data that is exactly the same for each effect. Effect pools are meant to solve this problem. This sample demonstrates the use of effect pools on Direct3D 9 and Direct3D 10.]]>
	</description>
	<folder>Samples\C++\Direct3D10\EffectPools\</folder>
        <exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<screenshot>EffectPools.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_EffectPools_sample.htm</doc>
	<projectfile7>EffectPools_2003.sln</projectfile7>
	<install dxut="true">
	    <media>misc</media>
	</install>
	<language>C++</language>
	<complexity>1500</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
	<visible>true</visible>
</sample>
<sample>
	<name>EmptyProject10</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2005</yearadded>
    <monthadded>12</monthadded>
	<description>
	<![CDATA[Minimal starting point for new Direct3D 10 applications. This sample also includes a Direct3D 9 fallback]]>
	</description>
	<folder>Samples\C++\Direct3D10\EmptyProject10\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>EmptyProject10.exe</exe>
	<screenshot>EmptyProject10.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_emptyproject10_sample.htm</doc>	     
	<projectfile7>EmptyProject10_2003.sln</projectfile7>
	<install dxut="true">
	</install>
	<language>C++</language>
	<complexity>20</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    	<visible>true</visible>
</sample>
<sample>
	<name>FixedFuncEMU</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2005</yearadded>
    <monthadded>12</monthadded>
	<description>
	<![CDATA[This Direct3D 10 sample shows how to implement Direct3D 9 level fixed-function functionality in Direct3D 10]]>
	</description>
	<folder>Samples\C++\Direct3D10\FixedFuncEMU\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>FixedFuncEMU.exe</exe>
	<screenshot>ffemu.jpg</screenshot>  
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_fixedfuncemu_sample.htm</doc>   
	<projectfile7>FixedFuncEMU_2003.sln</projectfile7>
	<install dxut="true">
		<media>misc</media>
		<media>BlackHoleroom</media>
	</install>
	<language>C++</language>
	<complexity>300</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
	<visible>true</visible>
</sample>
<sample>
	<name>GPUBoids</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2007</yearadded>
    <monthadded>11</monthadded>
	<description>
	<![CDATA[This is one of 3 sample applications shown during the Advanced Real-Time Rendering in 3D Graphics and Games course at SIGGraph 2007.  The Direct3D 10 sample shows a flocking algorithm managed entirely by the GPU.]]>
	</description>
	<folder>Samples\C++\Direct3D10\GPUBoids\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>GPUBoids.exe</exe>
	<screenshot>GPUBoids.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_GPUBoids_sample.htm</doc>	     
	<projectfile7>GPUBoids_2003.sln</projectfile7>
	<install dxut="true">
		<media>misc</media>
		<media>GPUBoids</media>
	</install>
	<language>C++</language>
	<complexity>1500</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    	<visible>true</visible>
</sample>
<sample>
	<name>GPUSpectrogram</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2005</yearadded>
    <monthadded>12</monthadded>
	<description>
	<![CDATA[This Direct3D 10 sample shows the creation of a spectrogram from a wav file using the GPU.]]>
	</description>
	<folder>Samples\C++\Direct3D10\GPUSpectrogram\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>GPUSpectrogram.exe</exe>
	<screenshot>GPUSpectrogram.jpg</screenshot> 
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_gpuspectrogram_sample.htm</doc>	     
	<projectfile7>GPUSpectrogram_2003.sln</projectfile7>
	<install dxut="false">
		<media>Wavs</media>
	</install>
	<language>C++</language>
	<complexity>1500</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>HDAO10.1</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2009</yearadded>
    <monthadded>8</monthadded>
	<description>
	<![CDATA[This sample, contributed by AMD, presents an innovative technique for achieving High Definition Ambient Occlusion (HDAO). It utilizes Direct3D 10.1 APIs and hardware, making use of the new shader model 4.1 gather4 instruction, to greatly accelerate the performance of this technique.]]>
	</description>
	<folder>Samples\C++\Direct3D10\HDAO10.1\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>HDAO10.1.exe</exe>
	<screenshot>HDAO10.1.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_HDAO10_1_sample.htm</doc>
	<projectfile7>HDAO10.1_2003.sln</projectfile7>
	<install dxut="true">
		<media>SoftParticles</media>
	</install>
	<language>C++</language>
	<complexity>1100</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>HDRFormats10</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2006</yearadded>
    <monthadded>2</monthadded>
	<description>
	<![CDATA[High dynamic range lighting effects require the ability to work with color values beyond the 0 to 255 range, usually by storing high range color data in textures. Floating point texture formats are the natural choice for HDR applications, but they may not be available on all target systems. This Direct3D 10 sample shows how high dynamic range data can be encoded into integer formats for compatibility across a wide range of devices. This sample also includes a Direct3D 9 fallback.]]>
	</description>
	<folder>Samples\C++\Direct3D10\HDRFormats10\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>HDRFormats10.exe</exe>
    <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_hdrformats10_sample.htm</doc>
	<screenshot>HDRFormats10.jpg</screenshot>
	<projectfile7>HDRFormats10_2003.sln</projectfile7>
	<install dxut="true">
		<media>misc</media>
		<media>Light Probes</media>
	</install>
	<language>C++</language>
	<complexity>1900</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    	<visible>true</visible>
</sample>
<sample>
	<name>HLSLWithoutFX10</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2005</yearadded>
    <monthadded>12</monthadded>
	<description>
	<![CDATA[This Direct3D 10 sample shows a simple example of the High-Level Shader Language (HLSL) without using the effect interface.]]>
	</description>
	<folder>Samples\C++\Direct3D10\HLSLWithoutFX10\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>HLSLWithoutFX10.exe</exe>
	<screenshot>HLSLWithoutFX.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_hlslwithoutfx10_sample.htm</doc>	     
	<projectfile7>HLSLWithoutFX_2003.sln</projectfile7>
	<install dxut="true">
	</install>
	<language>C++</language>
	<complexity>150</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    	<visible>true</visible>
</sample>
<sample>
	<name>Instancing10</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2005</yearadded>
    <monthadded>12</monthadded>
	<description>
	<![CDATA[This Direct3D 10 sample shows an example of using instancing to render a complex scene using few draw calls.]]>
	</description>
	<folder>Samples\C++\Direct3D10\Instancing10\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>Instancing10.exe</exe>
	<screenshot>instancing.jpg</screenshot>	
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_instancing10_sample.htm</doc>     
	<projectfile7>Instancing_2003.sln</projectfile7>
	<install dxut="true">
		<media>CloudBox</media>
		<media>trees</media>
		<media>IslandScene</media>
		<media>Data</media>
	</install>
	<language>C++</language>
	<complexity>1800</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    	<visible>true</visible>
</sample>
<sample>
	<name>MeshFromOBJ10</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2008</yearadded>
    <monthadded>11</monthadded>
	<description>
	<![CDATA[This sample shows how an ID3DX10Mesh object can be created from mesh data stored in a Wavefront Object file (.obj). This sample is an adaption of the Direct3D 9 sample MeshFromOBJ, which demonstrates best practices when porting to Direct3D 10 from Direct3D 9. The sample code has been constructed to facilitate side by side comparisons between versions to assist with learning.]]>
	</description>
	<folder>Samples\C++\Direct3D10\MeshFromOBJ10\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>MeshFromOBJ10.exe</exe>
	<screenshot>MeshFromOBJ10.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_MeshFromOBJ10_sample.htm</doc>  	     
	<projectfile7>MeshFromOBJ10.sln</projectfile7>
	<install dxut="true">
		
	</install>
	<language>C++</language>
	<complexity>800</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
    
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>MotionBlur10</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2006</yearadded>
    <monthadded>2</monthadded>
	<description>
	<![CDATA[This Direct3D 10 sample demonstrates using a combination of fin extrusion in the geometry shader and anisotropic texture filtering to create the illusion of motion blur.]]>
	</description>
	<folder>Samples\C++\Direct3D10\MotionBlur10\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>MotionBlur10.exe</exe>
	<screenshot>MotionBlur10.jpg</screenshot>
	<doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_motionblur10_sample.htm</doc>
	<projectfile7>MotionBlur10_2003.sln</projectfile7>
	<install dxut="true">
		<media>MotionBlur</media>
	</install>
	<language>C++</language>
	<complexity>5000</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    	<visible>true</visible>
</sample>
<sample>
	<name>MultiMon10</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2007</yearadded>
    <monthadded>2</monthadded>
	<description>
	<![CDATA[This sample shows how to handle multiple monitors in Direct3D 10.]]>
	</description>
	<folder>Samples\C++\Direct3D10\MultiMon10\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>MultiMon10.exe</exe>
	<screenshot>MultiMon10.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_MultiMon10_sample.htm</doc>	     
	<projectfile7>MultiMon10_2003.sln</projectfile7>
	<install dxut="true">
	</install>
	<language>C++</language>
	<complexity>2500</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
	<visible>true</visible>
</sample>
<sample>
	<name>MultiStreamRender</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2006</yearadded>
    <monthadded>4</monthadded>
	<description>
	<![CDATA[Multi-Stream rendering for Direct3D10 and Direct3D9 codepaths]]>
	</description>
	<folder>Samples\C++\Direct3D10\MultiStreamRendering\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>MultiStreamRendering.exe</exe>
	<screenshot>MultiStreamRendering.jpg</screenshot>
       	<doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_MultiStreamRendering_sample.htm</doc>
	<projectfile7>MultiStreamRendering_2003.sln</projectfile7>
	<install dxut="true">
	    <media>misc</media>
	</install>
	<language>C++</language>
	<complexity>1500</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
	<visible>true</visible>
</sample>
<sample>
	<name>NBodyGravity</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2007</yearadded>
    <monthadded>11</monthadded>
	<description>
	<![CDATA[This is one of 3 sample applications shown during the Advanced Real-Time Rendering in 3D Graphics and Games course at SIGGraph 2007.  The Direct3D 10 sample shows N-Body particles system managed entirely by the GPU.]]>
	</description>
	<folder>Samples\C++\Direct3D10\NBodyGravity\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>NBodyGravity.exe</exe>
	<screenshot>NBodyGravity.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_NBodyGravity_sample.htm</doc>	     
	<projectfile7>NBodyGravity_2003.sln</projectfile7>
	<install dxut="true">
		<media>misc</media>
	</install>
	<language>C++</language>
	<complexity>1500</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    	<visible>true</visible>
</sample>
<sample>
	<name>ParticlesGS</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2005</yearadded>
    <monthadded>12</monthadded>
	<description>
	<![CDATA[This Direct3D 10 sample shows a particles system managed entirely by the GPU.]]>
	</description>
	<folder>Samples\C++\Direct3D10\ParticlesGS\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>ParticlesGS.exe</exe>
	<screenshot>particlesgs.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_particlegs_sample.htm</doc>	     
	<projectfile7>particlesgs_2003.sln</projectfile7>
	<install dxut="true">
		<media>misc</media>
	</install>
	<language>C++</language>
	<complexity>500</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    	<visible>true</visible>
</sample>
<sample>
  <name>Pick10</name>
  <dxarea>Direct3D10</dxarea>
  <type>sample</type>
  <yearadded>2008</yearadded>
  <monthadded>9</monthadded>
  <description><![CDATA[This samples illustrates picking using Direct3D 10.]]></description>
  <folder>Samples\C++\Direct3D10\Pick10\</folder>
  <exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
  <exe>Pick10.exe</exe>
  <screenshot>Pick10.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_Pick_sample.htm</doc>
  <projectfile7>Pick10_2008.sln</projectfile7>
  <install dxut="true">
	<media>Scanner</media>
  </install>
  <language>C++</language>
  <complexity>900</complexity>
  <keywords>
    <keyword>ID3D10Device</keyword>
    <keyword>ID3D10</keyword>
  </keywords>
  <visible>true</visible>
</sample><sample>
	<name>PipesGS</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2005</yearadded>
    <monthadded>12</monthadded>
	<description>
	<![CDATA[This Direct3D 10 sample shows how to use the geometry shader to create new geometry on the fly.]]>
	</description>
	<folder>Samples\C++\Direct3D10\PipesGS\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>PipesGS.exe</exe>
	<screenshot>PipesGS.jpg</screenshot> 
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_pipesgs_sample.htm</doc>	     
	<projectfile7>PipesGS_2003.sln</projectfile7>
	<install dxut="true">
		<media>NightBox</media>
		<media>Crypt</media>
	</install>
	<language>C++</language>
	<complexity>2300</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
	<visible>true</visible>
</sample>
<sample>
	<name>ProceduralMaterials</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2008</yearadded>
    <monthadded>3</monthadded>
	<description>
	<![CDATA[This Direct3D 10 sample shows various procedural materials created through shaders.]]>
	</description>
	<folder>Samples\C++\Direct3D10\ProceduralMaterials\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>ProceduralMaterials.exe</exe>
	<screenshot>ProceduralMaterials.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_ProceduralMaterials_sample.htm</doc>  	     
	<projectfile7>ProceduralMaterials_2003.sln</projectfile7>
	<install dxut="true">
		<media>misc</media>
	</install>
	<language>C++</language>
	<complexity>3000</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>RaycastTerrain</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2008</yearadded>
    <monthadded>8</monthadded>
	<description>
	<![CDATA[This sample shows how to render terrain using cone-step mapping in the pixel shader.]]>
	</description>
	<folder>Samples\C++\Direct3D10\RaycastTerrain\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>RaycastTerrain.exe</exe>
	<screenshot>RaycastTerrain.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_RaycastTerrain_sample.htm</doc>  	     
	<projectfile7>RaycastTerrain_2003.sln</projectfile7>
	<install dxut="true">
		<media>RaycastTerrain</media>
		<media>misc</media>
	</install>
	<language>C++</language>
	<complexity>2000</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>ShadowVolume10</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2005</yearadded>
    <monthadded>12</monthadded>
	<description>
	<![CDATA[This Direct3D 10 sample shows how to implement shadow volume using the Geometry Shader. This sample also includes a Direct3D 9 fallback]]>
	</description>
	<folder>Samples\C++\Direct3D10\ShadowVolume10\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>ShadowVolume10.exe</exe>
	<screenshot>ShadowVolume.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_shadowvolume10_sample.htm</doc>	     
	<projectfile7>ShadowVolume_2003.sln</projectfile7>
	<install dxut="true">
		<media>misc</media>
		<media>dwarf</media>
	</install>
	<language>C++</language>
	<complexity>1600</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
	<visible>true</visible>
</sample>
<sample>
	<name>SimpleSample10</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2005</yearadded>
    <monthadded>12</monthadded>
	<description>
	<![CDATA[Basic starting point for new Direct3D 10 samples.  This sample also includes a Direct3D 9 fallback]]>
	</description>
	<folder>Samples\C++\Direct3D10\SimpleSample10\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>SimpleSample10.exe</exe>
	<screenshot>SimpleSample.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_simplesample10_sample.htm</doc>	     
	<projectfile7>SimpleSample_2003.sln</projectfile7>
	<install dxut="true">
	</install>
	<language>C++</language>
	<complexity>50</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
	<visible>true</visible>
</sample>
<sample>
	<name>Skinning10</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2006</yearadded>
    <monthadded>8</monthadded>
	<description>
	<![CDATA[The Skinning10 sample demonstrates 4 different methods of indexing bone transformation matrices for GPU skinning. In addition, it demonstrates how stream out without a Geometry Shader can be used to cut down vertex processing cost when skinned model will used for mutiple rendering passes.]]>
	</description>
	<folder>Samples\C++\Direct3D10\Skinning10\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>Skinning10.exe</exe>
	<screenshot>Skinning10.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_Skinning10_sample.htm</doc>	     
	<projectfile7>Skinning10_2003.sln</projectfile7>
	<install dxut="true">
		<media>soldier</media>
	</install>
	<language>C++</language>
	<complexity>1500</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
	<visible>true</visible>
</sample>
<sample>
	<name>SoftParticles</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2006</yearadded>
    <monthadded>6</monthadded>
	<description>
	<![CDATA[This Direct3D 10 sample eliminates artifacts commonly seen when 2D particles intersect 3D geometry by reading the depth buffer and clipping particles against it smoothly.  On a Direct3D 10.1 card, it also shows how to do the same technique against an MSAA enabled depth buffer.]]>
	</description>
	<folder>Samples\C++\Direct3D10\SoftParticles\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>SoftParticles.exe</exe>
	<screenshot>SoftParticles.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_SoftParticles_sample.htm</doc>	     
	<projectfile7>SoftParticles_2003.sln</projectfile7>
	<install dxut="true">
		<media>SoftParticles</media>
	</install>
	<language>C++</language>
	<complexity>600</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    	<visible>true</visible>
</sample>
<sample>
	<name>SparseMorphTargets</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2005</yearadded>
    <monthadded>12</monthadded>
	<description>
	<![CDATA[This Direct3D 10 sample shows facial animation using sparse morph targets, wrinkle maps, and LDPRT lighting.]]>
	</description>
	<folder>Samples\C++\Direct3D10\SparseMorphTargets\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>SparseMorphTargets.exe</exe>
	<screenshot>SparseMorphTargets.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_sparsemorphtargets_sample.htm</doc>
	<projectfile7>SparseMorphTargets_2003.sln</projectfile7>
	<install dxut="true">
		<media>SparseMorphTargets</media>
		<media>BatHead</media>
	</install>
	<language>C++</language>
	<complexity>2900</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    	<visible>true</visible>
</sample>
<sample>
	<name>SubD10</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2008</yearadded>
    <monthadded>3</monthadded>
	<description>
	<![CDATA[This Direct3D 10 sample demonstrates Charles Loop's and Scott Schaefer's Approximate Catmull-Clark subdivision surface technique running on D3D10 hardware.]]>
	</description>
	<folder>Samples\C++\Direct3D10\SubD10\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>SubD10.exe</exe>
	<screenshot>SubD10.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_subd10_sample.htm</doc>  	     
	<projectfile7>SubD10_2003.sln</projectfile7>
	<install dxut="true">
		<media>SubD10</media>
	</install>
	<language>C++</language>
	<complexity>5000</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>TransparencyAA10.1</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2009</yearadded>
    <monthadded>8</monthadded>
	<description>
	<![CDATA[This sample, contributed by AMD, presents a technique for achieving MSAA quality rendering for primitives that require transparency. It utilizes Direct3D 10.1 APIs and hardware to make use of the new fixed MSAA sample patterns, and the export of the coverage mask from the pixel shader.]]>
	</description>
	<folder>Samples\C++\Direct3D10\TransparencyAA10.1\</folder>
	<exefolder>Samples\C++\Direct3D10\Bin\</exefolder>
	<exe>TransparencyAA10.1.exe</exe>
	<screenshot>Screenshot.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_TransparencyAA10_1_sample.htm</doc>  	     
	<install dxut="true">
		<media>TransparencyAA</media>
	</install>
	<language>C++</language>
	<complexity>1000</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
		<keyword>ID3D10</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>Direct3D 10 Shader Model 4.0 Workshop</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea></dxsubarea>
	<type>tutorial</type>
  <yearadded>2006</yearadded>
  <monthadded>8</monthadded>
	<description>
	<![CDATA[This series of guided lessons is derived from the Direct3D 10 Shader Model 4.0 Workshop presented at the Game Developers Conference 2006. The lessons are divided into 6 Visual C++ project files containing near-complete HLSL code, each of which requires the student to add the missing code needed to implement the target graphics techinque for that lesson. This workshop format is intended to give you an opportunity to experiment with the power and flexibility of HLSL with only a minimal knowledge of HLSL syntax. ]]>
	</description>
	<folder>Samples\C++\Direct3D10\tutorials\Direct3D10Workshop\</folder>
	<screenshot>d3d10workshop.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_workshop_shader4.htm</doc>
    <install dxut="true">
    </install>
	<language>C++</language>
	<complexity>700</complexity>
	<keywords>
		<keyword>HLSL</keyword>
		<keyword>High-Level Shader Language</keyword>
	</keywords>
<visible>true</visible>
</sample>
<sample>
	<name>Advanced Shader Authoring Workshop GDC 2007</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea>Tutorials</dxsubarea>
	<type>tutorial</type>
  <yearadded>2007</yearadded>
  <monthadded>6</monthadded>
	<description>
	<![CDATA[This series of guided lessons is derived from the Advanced Shader Authoring Workshop presented at the Game Developers Conference 2007. The lessons are divided into 6 Visual C++ project files containing near-complete HLSL code, each of which requires the student to add the missing code needed to implement the target graphics techinque for that lesson. This workshop format is intended to give you an opportunity to experiment with the power and flexibility of HLSL with only a minimal knowledge of HLSL syntax. ]]>
	</description>
	<folder>Samples\C++\Direct3D10\tutorials\Direct3D10WorkshopGDC2007\</folder>
	<screenshot>d3d10workshop2007.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_workshop_GDC2007.htm</doc>
    <install dxut="true">
    	<media>misc</media>
    	<media>wavs</media>
    </install>
	<language>C++</language>
	<complexity>700</complexity>
	<keywords>
		<keyword>HLSL</keyword>
		<keyword>High-Level Shader Language</keyword>
	</keywords>
<visible>true</visible>
</sample>
<sample>
	<name>Performance Workshop GDC 2007</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea>Tutorials</dxsubarea>
	<type>tutorial</type>
  <yearadded>2007</yearadded>
  <monthadded>6</monthadded>
	<description>
	<![CDATA[This series of guided lessons is derived from the Performance Workshop presented at the Game Developers Conference 2007. The lessons are divided into 3 Visual C++ project files.  Each project requires the student to find the performance bottleneck for the application and fix the bottleneck in code.]]>
	</description>
	<folder>Samples\C++\Direct3D10\tutorials\PIXWorkshopGDC2007\</folder>
	<screenshot>pixworkshop2007.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_workshop_PIXGDC2007.htm</doc>
    <install dxut="true">
    </install>
	<language>C++</language>
	<complexity>700</complexity>
	<keywords>
		<keyword>Performance</keyword>
		<keyword>PIX</keyword>
	</keywords>
<visible>true</visible>
</sample>
<sample>
	<name>Tutorial 00: Win32 Basics</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea>Tutorials</dxsubarea>
	<type>tutorial</type>
    <yearadded>2005</yearadded>
    <monthadded>12</monthadded>
	<description>
	<![CDATA[In this preliminary tutorial, we will go through the elements necessary to create a Win32 application. We will be setting up an empty window to prepare for Direct3D 10.]]>
	</description>
	<folder>Samples\C++\Direct3D10\Tutorials\Tutorial00\</folder>
	<screenshot>Tutorial00.jpg</screenshot>	   
    <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_Tutorial_00.htm</doc>  
	<projectfile7>Tutorial00_2003.sln</projectfile7>
	<install/>
	<language>C++</language>
	<complexity>1</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>Tutorial 01: Direct3D 10 Basics</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea>Tutorials</dxsubarea>
	<type>tutorial</type>
    <yearadded>2005</yearadded>
    <monthadded>12</monthadded>
	<description>
	<![CDATA[In this first tutorial, we will go through the elements necessary to create a minimal Direct3D 10 application. Every Direct3D 10 application must have these elements to function properly. The elements include setting up a window and a device object then displaying a color on the window.]]>
	</description>
	<folder>Samples\C++\Direct3D10\Tutorials\Tutorial01\</folder>
	<screenshot>Tutorial01.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_Tutorial_01.htm</doc>  
	<projectfile7>Tutorial01_2003.sln</projectfile7>
	<install/>
	<language>C++</language>
	<complexity>2</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>Tutorial 02: Rendering a Triangle</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea>Tutorials</dxsubarea>
	<type>tutorial</type>
    <yearadded>2005</yearadded>
    <monthadded>12</monthadded>
	<description>
	<![CDATA[In the previous tutorial, we built a minimal bare bone Direct3D 10 application that outputs a single color to the window. In this tutorial, we will extend the application to render a single triangle on the screen. We will go through the process to setup the data structures associated with a triangle.]]>
	</description>
	<folder>Samples\C++\Direct3D10\Tutorials\Tutorial02\</folder>
	<screenshot>Tutorial02.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_Tutorial_02.htm</doc>  
	<projectfile7>Tutorial02_2003.sln</projectfile7>
	<install/>
	<language>C++</language>
	<complexity>5</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>Tutorial 03: Shaders and the Effect System</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea>Tutorials</dxsubarea>
	<type>tutorial</type>
    <yearadded>2005</yearadded>
    <monthadded>12</monthadded>
	<description>
	<![CDATA[In the previous tutorial, we setup a vertex buffer and passed one triangle to the GPU. Now, we will actually step through the graphics pipeline and look at how each stage works. The concept of shaders and the effect system will be explained.]]>
	</description>
	<folder>Samples\C++\Direct3D10\Tutorials\Tutorial03\</folder>
	<screenshot>Tutorial03.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_Tutorial_03.htm</doc>  
	<projectfile7>Tutorial03_2003.sln</projectfile7>
	<install/>
	<language>C++</language>
	<complexity>5</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>Tutorial 04: 3D Spaces</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea>Tutorials</dxsubarea>
	<type>tutorial</type>
    <yearadded>2005</yearadded>
    <monthadded>12</monthadded>
	<description>
	<![CDATA[In the previous tutorial, we have successfully rendered a triangle in the center of our application window. We haven't paid much attention to the vertex positions that we have picked in our vertex buffer. In this tutorial, we will delve into the details of 3D positions and transformation.]]>
	</description>
	<folder>Samples\C++\Direct3D10\Tutorials\Tutorial04\</folder>
	<screenshot>Tutorial04.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_Tutorial_04.htm</doc>  
	<projectfile7>Tutorial04_2003.sln</projectfile7>
	<install/>
	<language>C++</language>
	<complexity>30</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>Tutorial 05: 3D Transformation</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea>Tutorials</dxsubarea>
	<type>tutorial</type>
    <yearadded>2005</yearadded>
    <monthadded>12</monthadded>
	<description>
	<![CDATA[In the previous tutorial, we rendered a cube from model space to the screen. In this tutorial, we will extend the concept of transformations and demonstrate simple animation that can be achieved with these transformations.]]>
	</description>
	<folder>Samples\C++\Direct3D10\Tutorials\Tutorial05\</folder>
	<screenshot>Tutorial05.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_Tutorial_05.htm</doc>  
	<projectfile7>Tutorial05_2003.sln</projectfile7>
	<install/>
	<language>C++</language>
	<complexity>50</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>Tutorial 06: Lighting</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea>Tutorials</dxsubarea>
	<type>tutorial</type>
    <yearadded>2005</yearadded>
    <monthadded>12</monthadded>
	<description>
	<![CDATA[In the previous tutorials, the world looks boring because all the objects are lit in the same way. This tutorial will introduce the concept of simple lighting and how it can be applied. The technique use will be lambertian lighting.]]>
	</description>
	<folder>Samples\C++\Direct3D10\Tutorials\Tutorial06\</folder>
	<screenshot>Tutorial06.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_Tutorial_06.htm</doc>  
	<projectfile7>Tutorial06_2003.sln</projectfile7>
	<install/>
	<language>C++</language>
	<complexity>80</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>Tutorial 07: Texture Mapping and Constant Buffers</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea>Tutorials</dxsubarea>
	<type>tutorial</type>
    <yearadded>2005</yearadded>
    <monthadded>12</monthadded>
	<description>
	<![CDATA[In the previous tutorial we introduced lighting to our project; now we will build on top of that by adding textures to our cube. In addition, we will be introducing the concept of constant buffers and how they can be used to speed up processing by minimizing bandwidth usage.]]>
	</description>
	<folder>Samples\C++\Direct3D10\Tutorials\Tutorial07\</folder>
	<screenshot>Tutorial07.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_Tutorial_07.htm</doc>  
	<projectfile7>Tutorial07_2003.sln</projectfile7>
	<install/>
	<language>C++</language>
	<complexity>100</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>Tutorial 08: Introduction to DXUT</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea>Tutorials</dxsubarea>
	<type>tutorial</type>
    <yearadded>2005</yearadded>
    <monthadded>12</monthadded>
	<description>
	<![CDATA[This tutorial will introduce DXUT. DXUT is a layer built on top of Direct3D to help make samples, prototypes, tools, and professional games more robust and easier to build. It simplifies Windows and Direct3D APIs based on typical usage.]]>
	</description>
	<folder>Samples\C++\Direct3D10\Tutorials\Tutorial08\</folder>
	<screenshot>Tutorial08.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_Tutorial_08.htm</doc>  
	<projectfile7>Tutorial08_2003.sln</projectfile7>
	<install dxut="true"/>
	<language>C++</language>
	<complexity>110</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>Tutorial 09: Meshes in DXUT</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea>Tutorials</dxsubarea>
	<type>tutorial</type>
    <yearadded>2005</yearadded>
    <monthadded>12</monthadded>
	<description>
	<![CDATA[This tutorial will introduce the concept of using meshes to import source art. It will demonstrate the method using the help of DXUT. However, concepts covered here can also be applied without it.]]>
	</description>
	<folder>Samples\C++\Direct3D10\Tutorials\Tutorial09\</folder>
	<screenshot>Tutorial09.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_Tutorial_09.htm</doc>
	<projectfile7>Tutorial09_2003.sln</projectfile7>
	<install dxut="true">
		<media>Tiny</media>
	</install>
	<language>C++</language>
	<complexity>150</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>Tutorial 10: Advanced DXUT</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea>Tutorials</dxsubarea>
	<type>tutorial</type>
    <yearadded>2005</yearadded>
    <monthadded>12</monthadded>
	<description>
	<![CDATA[This tutorial will cover the more advanced aspects related to DXUT. Most of the functionality shown in this tutorial are optional, and are used to enhance your application with minimal costs. DXUT provides a simple sprite based GUI system and a device settings dialog. In addition, it provides a few types of camera classes.]]>
	</description>
	<folder>Samples\C++\Direct3D10\Tutorials\Tutorial10\</folder>
	<screenshot>Tutorial10.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_Tutorial_10.htm</doc>
	<projectfile7>Tutorial10_2003.sln</projectfile7>
	<install dxut="true">
		<media>Tiny</media>
	</install>
	<language>C++</language>
	<complexity>200</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>Tutorial 11: Vertex Shaders</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea>Tutorials</dxsubarea>
	<type>tutorial</type>
    <yearadded>2005</yearadded>
    <monthadded>12</monthadded>
	<description>
	<![CDATA[This tutorial will emphasize on the capabilities of the vertex shader. It is meant to show the users the possibilities of allowing manipulation of vertices.]]>
	</description>
	<folder>Samples\C++\Direct3D10\Tutorials\Tutorial11\</folder>
	<screenshot>Tutorial11.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_Tutorial_11.htm</doc>
	<projectfile7>Tutorial11_2003.sln</projectfile7>
	<install dxut="true">
		<media>Tiny</media>
	</install>
	<language>C++</language>
	<complexity>300</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>Tutorial 12: Pixel Shaders</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea>Tutorials</dxsubarea>
	<type>tutorial</type>
    <yearadded>2005</yearadded>
    <monthadded>12</monthadded>
	<description>
	<![CDATA[This tutorial will focus on the pixel shader and its capabilities. There are many things that can be accomplished with the PS, and some of the more common functions are listed. The pixel shader will apply an environment map to the object.]]>
	</description>
	<folder>Samples\C++\Direct3D10\Tutorials\Tutorial12\</folder>
	<screenshot>Tutorial12.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_Tutorial_12.htm</doc>
	<projectfile7>Tutorial12_2003.sln</projectfile7>
	<install dxut="true">
		<media>Tiny</media>
		<media>Lobby</media>
	</install>
	<language>C++</language>
	<complexity>400</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>Tutorial 13: Geometry Shaders</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea>Tutorials</dxsubarea>
	<type>tutorial</type>
    <yearadded>2005</yearadded>
    <monthadded>12</monthadded>
	<description>
	<![CDATA[This tutorial will explore a part of the graphics pipeline that has not been touched in the previous tutorials. We will be touching upon some basic geometry shader functionality.]]>
	</description>
	<folder>Samples\C++\Direct3D10\Tutorials\Tutorial13\</folder>
	<screenshot>Tutorial13.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_Tutorial_13.htm</doc>
	<projectfile7>Tutorial13_2003.sln</projectfile7>
	<install dxut="true">
		<media>Tiny</media>
	</install>
	<language>C++</language>
	<complexity>1100</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>Tutorial 14: State Management</name>
	<dxarea>Direct3D10</dxarea>
	<dxsubarea>Tutorials</dxsubarea>
	<type>tutorial</type>
    <yearadded>2005</yearadded>
    <monthadded>2</monthadded>
	<description>
	<![CDATA[This tutorial will cover the basics of state management using both the Direct3D 10 APIs and the FX framework.]]>
	</description>
	<folder>Samples\C++\Direct3D10\Tutorials\Tutorial14\</folder>
	<screenshot>Tutorial14.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/d3d10_Tutorial_14.htm</doc>
	<projectfile7>Tutorial14_2003.sln</projectfile7>
	<install dxut="true">
		<media>Tiny</media>
		<media>misc</media>
	</install>
	<language>C++</language>
	<complexity>800</complexity>
	<keywords>
		<keyword>ID3D10Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
  <name>AdaptiveTessellationCS40</name>
  <dxarea>Direct3D11</dxarea>
  <dxsubarea></dxsubarea>
  <type>sample</type>
  <yearadded>2009</yearadded>
  <monthadded>3</monthadded>
  <description>
    <![CDATA[This sample demonstrates some adaptive tessellation techniques implemented using Compute Shader 4.0. The tessellation scheme being implemented here is identical to that of DirectX11 triangle patch based tessellation. So potentially this technique here could be a fallback solution for future games or other applications which utilize DirectX11 hardware tessellation when they are running on 10.x only devices, as Compute Shader 4.0 runs on most DirectX 10.x hardware today.]]>
  </description>
  <folder>Samples\C++\Direct3D11\AdaptiveTessellationCS40\</folder>
  <exefolder>Samples\C++\Direct3D11\Bin\</exefolder>
  <exe>AdaptiveTessellationCS40.exe</exe>
  <screenshot>AdaptiveTessellationCS40.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/d3d11_AdaptiveTessellationCS40_sample.htm</doc>
  <projectfile8>AdaptiveTessellationCS40.sln</projectfile8>
  <install dxut="true">
    <media>UI</media>
  </install>
  <language>C++</language>
  <complexity>2000</complexity>
  <keywords>
    <keyword>ID3D11Device</keyword>
    <keyword>ID3D11ComputeShader</keyword>
  </keywords>
  <visible>true</visible>
</sample>
<sample>
  <name>BasicCompute11</name>
  <dxarea>Direct3D11</dxarea>
  <dxsubarea></dxsubarea>
  <type>sample</type>
  <yearadded>2009</yearadded>
  <monthadded>8</monthadded>
  <description>
    <![CDATA[This Direct3D 11 sample shows the basics to get DirectX 11 Compute Shader up and running by implementing a simple Array A + Array B on GPU.]]>
  </description>
  <folder>Samples\C++\Direct3D11\BasicCompute11\</folder>
  <exefolder>Samples\C++\Direct3D11\Bin\</exefolder>
  <exe>BasicCompute11.exe</exe>
  <screenshot>BasicCompute11.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/d3d11_BasicCompute11_sample.htm</doc>
  <projectfile8>BasicCompute11.sln</projectfile8>
  <install></install>
  <consoleapp>yes</consoleapp>
  <language>C++</language>
  <complexity>800</complexity>
  <keywords>
    <keyword>ID3D11Device</keyword>
    <keyword>ID3D11ComputeShader</keyword>
  </keywords>
  <visible>true</visible>
</sample>
<sample>
	<name>BasicHLSL11</name>
	<dxarea>Direct3D11</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2009</yearadded>
    <monthadded>8</monthadded>
	<description>
	<![CDATA[This Direct3D 11 sample shows a simple example of using the High-Level Shader Language (HLSL).]]>
	</description>
	<folder>Samples\C++\Direct3D11\BasicHLSL11\</folder>
	<exefolder>Samples\C++\Direct3D11\Bin\</exefolder>
	<exe>BasicHLSL11.exe</exe>
	<screenshot>BasicHLSL.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d11_basichlsl11_sample.htm</doc>  	     
	<projectfile8>BasicHLSL11_2008.sln</projectfile8>
	<install dxut="true">
		<media>Tiny</media>
		<media>UI</media>
	</install>
	<language>C++</language>
	<complexity>100</complexity>
	<keywords>
		<keyword>ID3D11Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
  <name>BC6HBC7EncoderDecoder11</name>
  <dxarea>Direct3D11</dxarea>
  <dxsubarea></dxsubarea>
  <type>sample</type>
  <yearadded>2009</yearadded>
  <monthadded>8</monthadded>
  <description>
    <![CDATA[This Direct3D 11 sample implements the BC6H BC7 encoding and decoding using Compute Shader 4.0. It shows some advanced usage of Compute Shader and it is also a handy tool which converts textures between BC6H BC7 formats and their original texture formats. This Compute Shader accelerated version of the encoder is 10 to over 100 times faster than the D3DX encoding utility which is running on the CPU. On machines which don't support CS40, the tool falls back to D3DX CPU encoding/decoding automatically. BC6H and BC7 are two new block compressed texture formats introduced in D3D11 which target much better visual quality than previous BC texture formats.]]>
  </description>
  <folder>Samples\C++\Direct3D11\BC6HBC7EncoderDecoder11\</folder>
  <exefolder>Samples\C++\Direct3D11\Bin\</exefolder>
  <exe>BC6HBC7EncoderDecoder11.exe</exe>
  <screenshot>BC6HBC7EncoderDecoder11.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/d3d11_BC6HBC7EncoderDecoder11_sample.htm</doc>
  <projectfile8>BC6HBC7EncoderDecoder11.sln</projectfile8>
  <install></install>
  <consoleapp>yes</consoleapp>
  <language>C++</language>
  <complexity>3000</complexity>
  <keywords>
    <keyword>ID3D11Device</keyword>
    <keyword>ID3D11ComputeShader</keyword>
    <keyword>BC6H</keyword>
    <keyword>BC7</keyword>
  </keywords>
  <visible>true</visible>
</sample>
<sample>
	<name>CascadedShadowMaps11</name>
	<dxarea>Direct3D11</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2009</yearadded>
    <monthadded>8</monthadded>
	<description>
	<![CDATA[This Direct3D 11 sample is an interactive demonstration of cascaded shadow maps and other techniques that improve shadow map fidelity.]]>
	</description>
	<folder>Samples\C++\Direct3D11\CascadedShadowMaps11\</folder>
	<exefolder>Samples\C++\Direct3D11\Bin\</exefolder>
	<exe>CascadedShadowMaps11.exe</exe>
	<screenshot>CascadedShadowMaps11.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d11_CascadedShadowMaps11_sample.htm</doc>  	     
	<projectfile8>CascadedShadowMaps11_2008.sln</projectfile8>
	<install dxut="true">
		<media>powerplant</media>
		<media>ShadowColumns</media>
		<media>UI</media>
	</install>
	<language>C++</language>
	<complexity>700</complexity>
	<keywords>
		<keyword>ID3D11Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>ComputeShaderSort11</name>
	<dxarea>Direct3D11</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
	<yearadded>2009</yearadded>
	<monthadded>8</monthadded>
	<description>
	<![CDATA[This Direct3D 11 sample shows how to implement a bitonic sort on the GPU using Compute Shader 4.0.]]>
	</description>
	<folder>Samples\C++\Direct3D11\ComputeShaderSort11\</folder>
	<exefolder>Samples\C++\Direct3D11\Bin\</exefolder>
	<exe>ComputeShaderSort11.exe</exe>
	<screenshot>ComputeShaderSort11.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d11_computeshadersort11_sample.htm</doc>  	     
	<projectfile8>ComputeShaderSort11_2008.sln</projectfile8>
	<install dxut="true">
	</install>
	<consoleapp>yes</consoleapp>	
	<language>C++</language>
	<complexity>1100</complexity>
	<keywords>
		<keyword>ID3D11Device</keyword>
    		<keyword>ID3D11ComputeShader</keyword>
	</keywords>
	<visible>true</visible>
</sample>
<sample>
  <name>ContactHardeningShadows11</name>
  <dxarea>Direct3D11</dxarea>
  <dxsubarea></dxsubarea>
  <type>sample</type>
  <yearadded>2009</yearadded>
  <monthadded>8</monthadded>
  <description>
    <![CDATA[This sample, contributed by AMD, presents a Direct3D 11 Shader Model 5.0 accelerated technique that uses non-stationary, dynamic-weight matrices for unique per-sample filter weights (these don't necessarily represent a seperable filter) for a contact hardening shadow effect]]>
  </description>
  <folder>Samples\C++\Direct3D11\ContactHardeningShadows11\</folder>
  <exefolder>Samples\C++\Direct3D11\Bin\</exefolder>
  <exe>ContactHardeningShadows11.exe</exe>
  <screenshot>Screenshot.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/d3d11_ContactHardeningShadows11_sample.htm</doc>
  <projectfile8>ContactHardeningShadows11_2005.sln</projectfile8>
  <install dxut="true">
    <media>ColumnScene</media>
    <media>UI</media>
  </install>
  <language>C++</language>
  <complexity>1000</complexity>
  <keywords>
    <keyword>ID3D11Device</keyword>
    <keyword>Shadow</keyword>
  </keywords>
  <visible>true</visible>
</sample>
<sample>
	<name>DDSWithoutD3DX11</name>
	<dxarea>Direct3D11</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2009</yearadded>
    <monthadded>8</monthadded>
	<description>
	<![CDATA[DDS texture loading without using the D3DX helper functions.]]>
	</description>
	<folder>Samples\C++\Direct3D11\DDSWithoutD3DX11\</folder>
	<exefolder>Samples\C++\Direct3D11\Bin\</exefolder>
	<exe>DDSWithoutD3DX11.exe</exe>
	<screenshot>DDSWithoutD3DX.jpg</screenshot>
    <doc>Documentation\DirectX9\directx_sdk.chm::/d3d11_DDSWithoutD3DX11_sample.htm</doc>
	<projectfile7>DDSWithoutD3DX_2003.sln</projectfile7>
	<install dxut="true">
          <media>UI</media>
          <media>misc</media>
	</install>
	<language>C++</language>
	<complexity>1500</complexity>
	<keywords>
		<keyword>ID3D11Device</keyword>
		<keyword>DDS</keyword>
	</keywords>
	<visible>true</visible>
</sample>
<sample new="true">
	<name>DecalTessellation11</name>
	<dxarea>Direct3D11</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
	<yearadded>2010</yearadded>
	<monthadded>6</monthadded>
	<description>
	<![CDATA[This sample, contributed by AMD, presents a technique for applying tessellation with displacement mapping using decals. Given an arbitrary mesh, the sample uses a ray cast to find the location of where a ray from the eye point intersects the mesh. A decal is placed at the intersection and the mesh is rendered with tessellation so that the triangle density is high enough for accurate displacement mapping. One possible use for this technique is to represent realistic looking 3D damage on objects.]]>
	</description>
	<folder>Samples\C++\Direct3D11\DecalTessellation11\</folder>
	<exefolder>Samples\C++\Direct3D11\Bin\</exefolder>
	<exe>DecalTessellation11.exe</exe>
	<screenshot>DecalTessellation11.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d11_decaltessellation11_sample.htm</doc>
	<projectfile8>DecalTessellation11_2008.sln</projectfile8>
	<install dxut="true">
		<media>ExoticCar</media>
		<media>Teapot</media>
		<media>Tiger</media>
		<media>Tiny</media>
		<media>UI</media>
		<media>Misc\Base.bmp</media>
		<media>Misc\Crack_Displacement.bmp</media>
		<media>Misc\Crack_Normal.bmp</media>
		<media>Misc\Metal_Displacement.bmp</media>
		<media>Misc\Metal_Normal.bmp</media>
		<media>Misc\Rock_Displacement.bmp</media>
		<media>Misc\Rock_Normal.bmp</media>
	</install>
	<language>C++</language>
	<complexity>1400</complexity>
	<keywords>
		<keyword>ID3D11Device</keyword>
	</keywords>
	<visible>true</visible>
</sample>
<sample updated="true">
  <name>DetailTessellation11</name>
  <dxarea>Direct3D11</dxarea>
  <dxsubarea></dxsubarea>
  <type>sample</type>
  <yearadded>2009</yearadded>
  <monthadded>8</monthadded>
  <description>
    <![CDATA[This sample, contributed by AMD, demonstrates the use of detail tessellation for improving the quality of material surfaces in real-time rendering applications.]]>
  </description>
  <folder>Samples\C++\Direct3D11\DetailTessellation11\</folder>
  <exefolder>Samples\C++\Direct3D11\Bin\</exefolder>
  <exe>DetailTessellation11.exe</exe>
  <screenshot>ScreenShot.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/d3d11_DetailTessellation11_sample.htm</doc>
  <projectfile8>DetailTessellation11_2005.sln</projectfile8>
  <install dxut="true">
    <media>Textures</media>
    <media>UI</media>
  </install>
  <language>C++</language>
  <complexity>1000</complexity>
  <keywords>
    <keyword>Tessellation</keyword>
  </keywords>
  <visible>true</visible>
</sample>
<sample>
	<name>DynamicShaderlinkage11</name>
	<dxarea>Direct3D11</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2008</yearadded>
    <monthadded>11</monthadded>
	<description>
	<![CDATA[This Direct3D 11 sample shows using High-Level Shader Language (HLSL) with dynamic linkage.]]>
	</description>
	<folder>Samples\C++\Direct3D11\DynamicShaderLinkage11\</folder>
	<exefolder>Samples\C++\Direct3D11\Bin\</exefolder>
	<exe>DynamicShaderLinkage11.exe</exe>
	<screenshot>DynamicShaderLinkage11.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d11_dynamic_shader_linkage11_sample.htm</doc>
	<projectfile8>DynamicShaderLinkage11_2008.sln</projectfile8>
	<install dxut="true">
		<media>Squid</media>
                <media>Light Probes</media>
		<media>UI</media>
	</install>
	<language>C++</language>
	<complexity>100</complexity>
	<keywords>
		<keyword>ID3D11Device</keyword>
		<keyword>Shader Model 5</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample new="true">
	<name>DynamicShaderlinkageFX11</name>
	<dxarea>Direct3D11</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2010</yearadded>
    <monthadded>6</monthadded>
	<description>
	<![CDATA[This Direct3D 11 sample shows using High-Level Shader Language (HLSL) and Effects 11 with dynamic shader linkage.]]>
	</description>
	<folder>Samples\C++\Direct3D11\DynamicShaderLinkageFX11\</folder>
	<exefolder>Samples\C++\Direct3D11\Bin\</exefolder>
	<exe>DynamicShaderLinkageFX11.exe</exe>
	<screenshot>DynamicShaderLinkageFX11.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d11_dynamic_shader_linkage11_sample.htm</doc>
	<projectfile8>DynamicShaderLinkageFX11_2008.sln</projectfile8>
	<install dxut="true" fx11="true">
		<media>Squid</media>
                <media>Light Probes</media>
		<media>UI</media>
	</install>
	<language>C++</language>
	<complexity>100</complexity>
	<keywords>
		<keyword>ID3D11Device</keyword>
		<keyword>Shader Model 5</keyword>
		<keyword>Effects 11</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>EmptyProject11</name>
	<dxarea>Direct3D11</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2009</yearadded>
    <monthadded>8</monthadded>
	<description>
	<![CDATA[Minimal starting point for new Direct3D 11 applications. This sample also includes a Direct3D 9 fallback]]>
	</description>
	<folder>Samples\C++\Direct3D11\EmptyProject11\</folder>
	<exefolder>Samples\C++\Direct3D11\Bin\</exefolder>
	<exe>EmptyProject11.exe</exe>
	<screenshot>EmptyProject11.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d11_emptyproject11_sample.htm</doc>	     
	<projectfile7>EmptyProject11_2003.sln</projectfile7>
	<install dxut="true">
		<media>UI</media>
	</install>
	<language>C++</language>
	<complexity>20</complexity>
	<keywords>
		<keyword>ID3D11Device</keyword>
	</keywords>
    	<visible>true</visible>
</sample>
<sample new="true">
	<name>FluidCS11</name>
	<dxarea>Direct3D11</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
	<yearadded>2010</yearadded>
	<monthadded>6</monthadded>
	<description>
	<![CDATA[This sample shows how to implement a Smoothed Particle Hydrodynamics Fluid simulation using Compute Shader.]]>
	</description>
	<folder>Samples\C++\Direct3D11\FluidCS11\</folder>
	<exefolder>Samples\C++\Direct3D11\Bin\</exefolder>
	<exe>FluidCS11.exe</exe>
	<screenshot>FluidCS11.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d11_fluidcs11_sample.htm</doc>  	     
	<projectfile8>FluidCS11_2008.sln</projectfile8>
	<install dxut="true">
		<media>UI</media>
	</install>
	<language>C++</language>
	<complexity>1600</complexity>
	<keywords>
		<keyword>SPH</keyword>
		<keyword>Fluid</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
  <name>HDRToneMappingCS11</name>
  <dxarea>Direct3D11</dxarea>
  <dxsubarea></dxsubarea>
  <type>sample</type>
  <yearadded>2008</yearadded>
  <monthadded>11</monthadded>
  <description>
    <![CDATA[This Direct3D 11 sample shows how to setup and run the Compute Shader, which is one of the most exciting new features of Direct3D 11. The sample implements HDR tone-mapping, blur and bloom using both Compute Shader and traditional Pixel Shader approaches to facilitate comparison.]]>
  </description>
  <folder>Samples\C++\Direct3D11\HDRToneMappingCS11\</folder>
  <exefolder>Samples\C++\Direct3D11\Bin\</exefolder>
  <exe>HDRToneMappingCS11.exe</exe>
  <screenshot>HDRToneMappingCS11.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/d3d11_HDRToneMappingCS11_sample.htm</doc>
  <projectfile8>HDRToneMappingCS11.sln</projectfile8>
  <install dxut="true">
    <media>Light Probes</media>
    <media>UI</media>
  </install>
  <language>C++</language>
  <complexity>1000</complexity>
  <keywords>
    <keyword>ID3D11Device</keyword>
    <keyword>ID3D11ComputeShader</keyword>
  </keywords>
  <visible>true</visible>
</sample>
<sample>
  <name>MultithreadedRendering11</name>
  <dxarea>Direct3D11</dxarea>
  <dxsubarea></dxsubarea>
  <type>sample</type>
  <yearadded>2008</yearadded>
  <monthadded>11</monthadded>
  <description>
    <![CDATA[This Direct3D 11 sample shows the use of deferred device contexts and command lists to split rendering work across multiple threads]]>
  </description>
  <folder>Samples\C++\Direct3D11\MultithreadedRendering11\</folder>
  <exefolder>Samples\C++\Direct3D11\Bin\</exefolder>
  <exe>MultithreadedRendering11.exe</exe>
  <screenshot>MultithreadedRendering11.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/d3d11_multithreadedrendering11_sample.htm</doc>
  <projectfile8>MultithreadedRendering11_2005.sln</projectfile8>
  <install dxut="true">
    <media>SquidRoom</media>
    <media>UI</media>
  </install>
  <language>C++</language>
  <complexity>1500</complexity>
  <keywords>
    <keyword>ID3D11Device</keyword>
    <keyword>ID3D11DeviceContext</keyword>
    <keyword>ID3D11CommandList</keyword>
  </keywords>
  <visible>true</visible>
</sample>
<sample>
	<name>NBodyGravityCS11</name>
	<dxarea>Direct3D11</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2009</yearadded>
    <monthadded>8</monthadded>
	<description>
	<![CDATA[This Direct3D 11 sample shows N-Body particles system implemented using Compute Shader. Because of benefits brought by Compute Shader, this sample achieves significantly higher fps than the previous N-Body sample (NBodyGravity under Direct3D 10 section) which was implemented using Direct3D 10 Pixel Shader and Geometry Shader.]]>
	</description>
	<folder>Samples\C++\Direct3D11\NBodyGravityCS11\</folder>
	<exefolder>Samples\C++\Direct3D11\Bin\</exefolder>
	<exe>NBodyGravityCS11.exe</exe>
	<screenshot>NBodyGravityCS11.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d11_NBodyGravityCS11_sample.htm</doc>  	     
	<projectfile8>NBodyGravityCS11.sln</projectfile8>
	<install dxut="true">
		<media>UI</media>
    <media>misc</media>
	</install>
	<language>C++</language>
	<complexity>1000</complexity>
	<keywords>
		<keyword>ID3D11Device</keyword>
    <keyword>ID3D11ComputeShader</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
  <name>OIT11</name>
  <dxarea>Direct3D11</dxarea>
  <dxsubarea></dxsubarea>
  <type>sample</type>
  <yearadded>2009</yearadded>
  <monthadded>8</monthadded>
  <description>
    <![CDATA[This Direct3D 11 sample shows how to perform Order Independent Transparency using the Compute Shader and scattered writes.]]>
  </description>
  <folder>Samples\C++\Direct3D11\OIT11\</folder>
  <exefolder>Samples\C++\Direct3D11\Bin\</exefolder>
  <exe>OIT11.exe</exe>
  <screenshot>OIT11.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/d3d11_OIT11_sample.htm</doc>
  <projectfile8>OIT11.sln</projectfile8>
  <install dxut="true">
    <media>UI</media>
  </install>
  <language>C++</language>
  <complexity>1500</complexity>
  <keywords>
    <keyword>ID3D11Device</keyword>
    <keyword>ID3D11ComputeShader</keyword>
  </keywords>
  <visible>true</visible>
</sample>
<sample updated="true">
  <name>PNTriangles11</name>
  <dxarea>Direct3D11</dxarea>
  <dxsubarea></dxsubarea>
  <type>sample</type>
  <yearadded>2009</yearadded>
  <monthadded>8</monthadded>
  <description>
    <![CDATA[This sample, contributed by AMD, presents a technique for achieving smooth surfaces from the position and normal data of a low density mesh. ]]>
  </description>
  <folder>Samples\C++\Direct3D11\PNTriangles11\</folder>
  <exefolder>Samples\C++\Direct3D11\Bin\</exefolder>
  <exe>PNTriangles11.exe</exe>
  <screenshot>Screenshot.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/d3d11_PNTriangles11_sample.htm</doc>
  <projectfile8>PNTriangles11_2005.sln</projectfile8>
  <install dxut="true">
    <media>Teapot</media>
    <media>Tiger</media>
    <media>Tiny</media>
    <media>UI</media>
  </install>
  <language>C++</language>
  <complexity>700</complexity>
  <keywords>
    <keyword>Tessellation</keyword>
  </keywords>
  <visible>true</visible>
</sample>
<sample>
	<name>SimpleBezier11</name>
	<dxarea>Direct3D11</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
	<yearadded>2009</yearadded>
	<monthadded>8</monthadded>
	<description>
	<![CDATA[This sample shows how to use the DirectX 11 Tessellation feature to render a simple Bezier patch.]]>
	</description>
	<folder>Samples\C++\Direct3D11\SimpleBezier11\</folder>
	<exefolder>Samples\C++\Direct3D11\Bin\</exefolder>
	<exe>SimpleBezier11.exe</exe>
	<screenshot>SimpleBezier11.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d11_simplebezier11_sample.htm</doc>  	     
	<projectfile8>SimpleBezier11_2008.sln</projectfile8>
	<install dxut="true">
		<media>UI</media>
	</install>
	<language>C++</language>
	<complexity>200</complexity>
	<keywords>
		<keyword>ID3D11Device</keyword>
		<keyword>tessellation</keyword>
		<keyword>hull shader</keyword>
		<keyword>domain shader</keyword>
		<keyword>Bezier patch</keyword>
		<keyword>Mobius strip</keyword>
	</keywords>
	<visible>true</visible>
</sample>
<sample>
	<name>SimpleSample11</name>
	<dxarea>Direct3D11</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2009</yearadded>
    <monthadded>8</monthadded>
	<description>
	<![CDATA[Basic starting point for new Direct3D 11 samples.  This sample also includes a Direct3D 9 fallback]]>
	</description>
	<folder>Samples\C++\Direct3D11\SimpleSample11\</folder>
	<exefolder>Samples\C++\Direct3D11\Bin\</exefolder>
	<exe>SimpleSample11.exe</exe>
	<screenshot>SimpleSample.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d11_simplesample11_sample.htm</doc>	     
	<projectfile7>SimpleSample_2003.sln</projectfile7>
	<install dxut="true">
		<media>UI</media>
	</install>
	<language>C++</language>
	<complexity>50</complexity>
	<keywords>
		<keyword>ID3D11Device</keyword>
	</keywords>
	<visible>true</visible>
</sample>
<sample>
	<name>SubD11</name>
	<dxarea>Direct3D11</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2008</yearadded>
    <monthadded>11</monthadded>
	<description>
	<![CDATA[This Direct3D 11 sample demonstrates Charles Loop's and Scott Schaefer's Approximate Catmull-Clark subdivision surface technique running on the D3D11 reference rasterizer.]]>
	</description>
	<folder>Samples\C++\Direct3D11\SubD11\</folder>
	<exefolder>Samples\C++\Direct3D11\Bin\</exefolder>
	<exe>SubD11.exe</exe>
	<screenshot>SubD11.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d11_subd11_sample.htm</doc>  	     
	<projectfile7>SubD11_2003.sln</projectfile7>
	<install dxut="true">
		<media>SubD10</media>
		<media>UI</media>
	</install>
	<language>C++</language>
	<complexity>5000</complexity>
	<keywords>
		<keyword>ID3D11Device</keyword>
		<keyword>tessellation</keyword>
		<keyword>hull shader</keyword>
		<keyword>domain shader</keyword>
		<keyword>Bezier patch</keyword>
		<keyword>Catmull-Clark subdivision surface</keyword>
		<keyword>subdivision surface</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample new="true">
	<name>Tutorial 01: Direct3D 11 Basics</name>
	<dxarea>Direct3D11</dxarea>
	<dxsubarea>Tutorials</dxsubarea>
	<type>tutorial</type>
    <yearadded>2010</yearadded>
    <monthadded>6</monthadded>
	<description>
	<![CDATA[In this first tutorial, we will go through the elements necessary to create a minimal Direct3D 11 application. Every Direct3D 11 application must have these elements to function properly. The elements include setting up a window and a device object then displaying a color on the window.]]>
	</description>
	<folder>Samples\C++\Direct3D11\Tutorials\Tutorial01\</folder>
	<screenshot>Tutorial01.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/d3d11_Tutorial_01.htm</doc>  
	<projectfile7>Tutorial01_2003.sln</projectfile7>
	<install/>
	<language>C++</language>
	<complexity>2</complexity>
	<keywords>
		<keyword>ID3D11Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample new="true">
	<name>Tutorial 02: Rendering a Triangle</name>
	<dxarea>Direct3D11</dxarea>
	<dxsubarea>Tutorials</dxsubarea>
	<type>tutorial</type>
    <yearadded>2010</yearadded>
    <monthadded>6</monthadded>
	<description>
	<![CDATA[In the previous tutorial, we built a minimal bare bone Direct3D 11 application that outputs a single color to the window. In this tutorial, we will extend the application to render a single triangle on the screen. We will go through the process to setup the data structures associated with a triangle.]]>
	</description>
	<folder>Samples\C++\Direct3D11\Tutorials\Tutorial02\</folder>
	<screenshot>Tutorial02.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/d3d11_Tutorial_02.htm</doc>  
	<projectfile7>Tutorial02_2003.sln</projectfile7>
	<install/>
	<language>C++</language>
	<complexity>5</complexity>
	<keywords>
		<keyword>ID3D11Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample new="true">
	<name>Tutorial 03: Shaders</name>
	<dxarea>Direct3D11</dxarea>
	<dxsubarea>Tutorials</dxsubarea>
	<type>tutorial</type>
    <yearadded>2010</yearadded>
    <monthadded>6</monthadded>
	<description>
	<![CDATA[In the previous tutorial, we setup a vertex buffer and passed one triangle to the GPU. Now, we will actually step through the graphics pipeline and look at how each stage works. The concept of shaders and the effect system will be explained.]]>
	</description>
	<folder>Samples\C++\Direct3D11\Tutorials\Tutorial03\</folder>
	<screenshot>Tutorial03.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/d3d11_Tutorial_03.htm</doc>  
	<projectfile7>Tutorial03_2003.sln</projectfile7>
	<install/>
	<language>C++</language>
	<complexity>5</complexity>
	<keywords>
		<keyword>ID3D11Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample new="true">
	<name>Tutorial 04: 3D Spaces</name>
	<dxarea>Direct3D11</dxarea>
	<dxsubarea>Tutorials</dxsubarea>
	<type>tutorial</type>
    <yearadded>2010</yearadded>
    <monthadded>6</monthadded>
	<description>
	<![CDATA[In the previous tutorial, we have successfully rendered a triangle in the center of our application window. We haven't paid much attention to the vertex positions that we have picked in our vertex buffer. In this tutorial, we will delve into the details of 3D positions and transformation.]]>
	</description>
	<folder>Samples\C++\Direct3D11\Tutorials\Tutorial04\</folder>
	<screenshot>Tutorial04.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/d3d11_Tutorial_04.htm</doc>  
	<projectfile7>Tutorial04_2003.sln</projectfile7>
	<install/>
	<language>C++</language>
	<complexity>30</complexity>
	<keywords>
		<keyword>ID3D11Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample new="true">
	<name>Tutorial 05: 3D Transformation</name>
	<dxarea>Direct3D11</dxarea>
	<dxsubarea>Tutorials</dxsubarea>
	<type>tutorial</type>
    <yearadded>2010</yearadded>
    <monthadded>6</monthadded>
	<description>
	<![CDATA[In the previous tutorial, we rendered a cube from model space to the screen. In this tutorial, we will extend the concept of transformations and demonstrate simple animation that can be achieved with these transformations.]]>
	</description>
	<folder>Samples\C++\Direct3D11\Tutorials\Tutorial05\</folder>
	<screenshot>Tutorial05.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/d3d11_Tutorial_05.htm</doc>  
	<projectfile7>Tutorial05_2003.sln</projectfile7>
	<install/>
	<language>C++</language>
	<complexity>50</complexity>
	<keywords>
		<keyword>ID3D11Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample new="true">
	<name>Tutorial 06: Lighting</name>
	<dxarea>Direct3D11</dxarea>
	<dxsubarea>Tutorials</dxsubarea>
	<type>tutorial</type>
    <yearadded>2010</yearadded>
    <monthadded>6</monthadded>
	<description>
	<![CDATA[In the previous tutorials, the world looks boring because all the objects are lit in the same way. This tutorial will introduce the concept of simple lighting and how it can be applied. The technique use will be lambertian lighting.]]>
	</description>
	<folder>Samples\C++\Direct3D11\Tutorials\Tutorial06\</folder>
	<screenshot>Tutorial06.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/d3d11_Tutorial_06.htm</doc>  
	<projectfile7>Tutorial06_2003.sln</projectfile7>
	<install/>
	<language>C++</language>
	<complexity>80</complexity>
	<keywords>
		<keyword>ID3D11Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample new="true">
	<name>Tutorial 07: Texture Mapping and Constant Buffers</name>
	<dxarea>Direct3D11</dxarea>
	<dxsubarea>Tutorials</dxsubarea>
	<type>tutorial</type>
    <yearadded>2010</yearadded>
    <monthadded>6</monthadded>
	<description>
	<![CDATA[In the previous tutorial we introduced lighting to our project; now we will build on top of that by adding textures to our cube. In addition, we will be introducing the concept of constant buffers and how they can be used to speed up processing by minimizing bandwidth usage.]]>
	</description>
	<folder>Samples\C++\Direct3D11\Tutorials\Tutorial07\</folder>
	<screenshot>Tutorial07.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/d3d11_Tutorial_07.htm</doc>  
	<projectfile7>Tutorial07_2003.sln</projectfile7>
	<install/>
	<language>C++</language>
	<complexity>100</complexity>
	<keywords>
		<keyword>ID3D11Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>VarianceShadows11</name>
	<dxarea>Direct3D11</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2009</yearadded>
    <monthadded>8</monthadded>
	<description>
	<![CDATA[This Direct3D 11 sample is an interactive demonstration of Cascaded Variance Shadow Maps.]]>
	</description>
	<folder>Samples\C++\Direct3D11\VarianceShadows11\</folder>
	<exefolder>Samples\C++\Direct3D11\Bin\</exefolder>
	<exe>VarianceShadows11.exe</exe>
	<screenshot>VarianceShadows11.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d11_VarianceShadows11_sample.htm</doc>  	     
	<projectfile8>VarianceShadows11_2008.sln</projectfile8>
	<install dxut="true">
		<media>powerplant</media>
		<media>ShadowColumns</media>
		<media>UI</media>
	</install>
	<language>C++</language>
	<complexity>900</complexity>
	<keywords>
		<keyword>ID3D11Device</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>WindowsTouch</name>
	<dxarea>Direct3D11</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2009</yearadded>
    <monthadded>8</monthadded>
	<description>
	<![CDATA[This Direct3D 11 sample demonstrates how to use the WM_TOUCH messages in an RTS style game.]]>
	</description>
	<folder>Samples\C++\Direct3D11\WindowsTouch\</folder>
        <exefolder>Samples\C++\Direct3D11\Bin\</exefolder>
	<screenshot>WindowsTouch.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/d3d11_WindowsTouch11_sample.htm</doc>  	     
	<projectfile8>WindowsTouch_2008.sln</projectfile8>
	<install dxut="true">
		<media>soldier</media> 
		<media>UI</media>
	</install>
	<language>C++</language>
	<complexity>100</complexity>
	<keywords>
		<keyword>multi</keyword>
		<keyword>touch</keyword>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
  <name>DirectInput CustomFormat</name>
  <dxarea>Input</dxarea>
  <type>sample</type>
  <yearadded>2002</yearadded>
  <monthadded>12</monthadded>
  <description><![CDATA[The CustomFormat sample illustrates the use of a custom data format.]]></description>
  <folder>Samples\C++\DirectInput\CustomFormat\</folder>
  <exefolder>Samples\C++\DirectInput\Bin\</exefolder>
  <exe>CustomFormat.exe</exe>
  <screenshot>CustomFormat.gif</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/customformat_sample.htm</doc>
  <projectfile6>CustomFormat.dsw</projectfile6>
  <projectfile7>CustomFormat.sln</projectfile7>
  <install common="false" />
  <language>C++</language>
  <complexity>1100</complexity>
  <keywords>
    <keyword>CustomFormat</keyword>
    <keyword>data</keyword>
    <keyword>format</keyword>
    <keyword>IDirectInput8</keyword>
    <keyword>SetDataFormat</keyword>
    <keyword>DIDATAFORMAT</keyword>
  </keywords>
<visible>true</visible></sample>
<sample>
	<name>DirectInput FFConst</name>
	<dxarea>Input</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
  <yearadded>2002</yearadded>
  <monthadded>12</monthadded>
	<description><![CDATA[The FFConst sample applies raw forces to a force feedback input device, illustrating how a simulator-type application can use force feedback to generate forces computed by a physics engine. You must have a force feedback device connected to your system in order to run the application.]]></description>
	<folder>Samples\C++\DirectInput\FFConst\</folder>
	<exefolder>Samples\C++\DirectInput\Bin\</exefolder>
	<exe>FFConst.exe</exe>
	<screenshot>FFConst.gif</screenshot>
	<doc>Documentation/DirectX9/directx_sdk.chm::/ffconst_sample.htm</doc>
	<projectfile6>FFConst.dsw</projectfile6>
		<projectfile7>FFConst.sln</projectfile7>
	
	<install common="false" />
	<language>C++</language>
	<complexity>1110</complexity>
	<keywords>
		<keyword>FFConst</keyword>
		<keyword>force</keyword>
		<keyword>feedback</keyword>
		<keyword>effect</keyword>
		<keyword>IDirectInput8</keyword>
		<keyword>IDirectInputEffect</keyword>
		<keyword></keyword>
	</keywords>
<visible>true</visible></sample>

<sample>
	<name>DirectInput Joystick</name>
	<dxarea>Input</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2002</yearadded>
    <monthadded>12</monthadded>
	<description><![CDATA[The Joystick sample obtains and displays joystick data.  This sample also contains XInput device filtering as described in the "XInput and DirectInput" documentation page.]]></description>
	<folder>Samples\C++\DirectInput\Joystick\</folder>
	<exefolder>Samples\C++\DirectInput\Bin\</exefolder>
	<exe>Joystick.exe</exe>
	<screenshot>Joystick.gif</screenshot>
	<doc>Documentation/DirectX9/directx_sdk.chm::/joystick_sample.htm</doc>
	<projectfile6>Joystick.dsw</projectfile6>
		<projectfile7>Joystick.sln</projectfile7>
	
	<install common="false">
		<reserved>DIJOYSTICK</reserved>	
		<reserved>EnumJoysticks</reserved>
		<reserved>g_pJoystick</reserved>
		<reserved>Joystick not found</reserved>
	</install>
	<language>C++</language>
	<complexity>110</complexity>
	<keywords>
		<keyword>Joystick</keyword>
		<keyword>IDirectInput8</keyword>
		<keyword></keyword>
	</keywords>
   <visible>true</visible>
</sample>
<sample>
  <name>Autorun</name>
  <dxarea>System</dxarea>
  <type>sample</type>
  <yearadded>2008</yearadded>
  <monthadded>06</monthadded>
  <description><![CDATA[The Autorun sample shows how to properly work with UAC and process elevation when building an autorun executable to start the installation process for a game and launch the game itself. ]]></description>
  <folder>Samples\C++\Misc\Autorun\</folder>
  <exefolder>Samples\C++\Misc\Bin\</exefolder>
  <screenshot>Autorun.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/Autorun_Sample.htm</doc>
  <projectfile7>Autorun.sln</projectfile7>
  <install common="false" />
  <language>C++</language>
  <consoleapp>no</consoleapp>
  <complexity>100</complexity>
  <keywords>
    <keyword>Autorun</keyword>
    <keyword>UAC</keyword>
    <keyword>Installation</keyword>
  </keywords>
  <dxsubarea />
<visible>true</visible></sample><sample>
	<name>Collision</name>
	<dxarea>System</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2009</yearadded>
    <monthadded>3</monthadded>
	<description>
	<![CDATA[Demonstration of XNAMath using a geometric collision library]]>
	</description>
	<folder>Samples\C++\Misc\Collision\</folder>
	<exefolder>Samples\C++\Misc\Bin\</exefolder>
	<exe>Collision.exe</exe>
	<screenshot>Collision.jpg</screenshot>
        <doc>Documentation/DirectX9/directx_sdk.chm::/sample_Collision.htm</doc>
	<projectfile7>Collision_2003.sln</projectfile7>
	<install dxut="true">
	</install>
	<language>C++</language>
	<complexity>1000</complexity>
	<keywords>
		<keyword>XNAMath</keyword>
                <keyword>SSE</keyword>
	</keywords>
    	<visible>true</visible>
</sample>
<sample>
	<name>Samples Content Exporter</name>
	<dxarea>Tools</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
	<description>
	<![CDATA[The Samples Content Exporter is a content processing tool that creates sample-ready assets from FBX format input files.]]>
	</description>
	<folder>Samples\C++\Misc\ContentExporter\</folder>
	<exefolder>Samples\C++\Misc\Bin\</exefolder>
	<screenshot>ContentExporter.jpg</screenshot>
  	<doc>Documentation/DirectX9/directx_sdk.chm::/graphics_tools_contentexporter.htm</doc>  	       	
	<projectfile7>ContentExporter.sln</projectfile7>
	<install dxut="false" common="false">
	</install>
	<consoleapp>yes</consoleapp>	
	<language>C++</language>
	<keywords>
		<keyword>exporter</keyword>
		<keyword>SDKMESH</keyword>
		<keyword>FBX</keyword>
	</keywords>
<visible>true</visible></sample><sample>
  <name>CoreDetection</name>
  <dxarea>System</dxarea>
  <type>sample</type>
  <yearadded>2006</yearadded>
  <monthadded>12</monthadded>
  <description><![CDATA[SMT or HT (Hyperthread Technology) threads share the resource of the CPU core.  Because they share the execution units, the maximum speedup from running two threads instead of one is typically 10% to 20%, instead of the 100% that is possible from two independent hardware threads.  More significantly, SMT or HT threads share the L1 instruction and data caches which can result in many cache misses if the threads' memory access patterns are incompatible.  In the worst case, the total performance for the CPU core can actually decrease when a second thread is run.  The safest assumption is to have no more than one CPU-intensive thread per CPU core.  Having more CPU-intensive threads than CPU cores gives little or no benefits, and brings the extra overhead and complexity of additional threads.  This sample demonstrates a small API that uses the GetLogicalProcessorInformation() function and the CPUID instruction to obtain CPU core topology information for the system and current process.  The information is then used to demonstrate how to target specific cores for thread execution. ]]></description>
  <folder>Samples\C++\Misc\CoreDetection\</folder>
  <exefolder>Samples\C++\Misc\Bin\</exefolder>
  <exe>CoreDetection.exe</exe>
  <screenshot>CoreDetection.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/coding_for_multiple_cores.htm</doc>
  <projectfile7>CoreDetection.sln</projectfile7>
  <install common="false" />
  <language>C++</language>
  <consoleapp>yes</consoleapp>
  <complexity>100</complexity>
  <keywords>
    <keyword>CoreDetection</keyword>
  </keywords>
  <dxsubarea />
<visible>true</visible></sample><sample updated="true">
  <name>D3D11InstallHelper</name>
  <dxarea>System</dxarea>
  <type>sample</type>
  <yearadded>2009</yearadded>
  <monthadded>8</monthadded>
  <description><![CDATA[This is a DLL and EXE with source that can be used directly with installers to check for Direct3D 11 API support, automatically install the Windows Vista update when applicable, and provides end-user messaging for when manually installing the update is required.]]></description>
  <folder>Samples\C++\Misc\D3D11InstallHelper\</folder>
  <exefolder>Samples\C++\Misc\Bin\</exefolder>
  <exe>D3D11Install.exe</exe>
  <screenshot>D3D11InstallHelper.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/Direct3D11_Deployment.htm</doc>
  <projectfile6>D3D11InstallHelper.dsw</projectfile6>
  <projectfile7>D3D11InstallHelper.sln</projectfile7>
  <install common="false">
	<reserved>FirewallEnabled</reserved>
  </install>
  <consoleapp>no</consoleapp>
  <language>C++</language>
  <complexity>100</complexity>
  <dxsubarea />
  <visible>true</visible>
</sample><sample>
  <name>DxDiagOutput</name>
  <dxarea>System</dxarea>
  <type>sample</type>
  <yearadded>2002</yearadded>
  <monthadded>12</monthadded>
  <description><![CDATA[The DxDiagOutput sample shows how to use the DxDiag COM interface by enumerating every child container and enumerating the properties on each child container.]]></description>
  <folder>Samples\C++\Misc\DxDiagOutput\</folder>
  <exefolder>Samples\C++\Misc\Bin\</exefolder>
  <exe>DxDiagOutput.exe</exe>
  <screenshot>DxDiagOutput.jpg</screenshot>
  <projectfile6>DxDiagOutput.dsw</projectfile6>
  <projectfile7>DxDiagOutput.sln</projectfile7>
  <install common="false" />
  <language>C++</language>
  <consoleapp>yes</consoleapp>
  <complexity>100</complexity>
  <keywords>
    <keyword>DxDiagOutput</keyword>
  </keywords>
  <dxsubarea />
<visible>true</visible></sample><sample>
  <name>DxDiagReport</name>
  <dxarea>System</dxarea>
  <type>sample</type>
  <yearadded>2002</yearadded>
  <monthadded>12</monthadded>
  <description><![CDATA[The DxDiagReport sample shows how to use the DxDiag COM interface by the instantiating a known set child container by name and enumerating the properties on each child container by name and stores this information in predefined structures.]]></description>
  <folder>Samples\C++\Misc\DxDiagReport\</folder>
  <exefolder>Samples\C++\Misc\Bin\</exefolder>
  <exe>DxDiagReport.exe</exe>
  <screenshot>DxDiagReport.jpg</screenshot>
  <projectfile6>DxDiagReport.dsw</projectfile6>
  <projectfile7>DxDiagReport.sln</projectfile7>
  <install common="false" />
  <language>C++</language>
  <complexity>100</complexity>
  <keywords>
    <keyword>DxDiagOutput</keyword>
  </keywords>
<visible>true</visible></sample><sample x64="false">
  <name>DirectX Install</name>
  <dxarea>System</dxarea>
  <type>sample</type>
  <yearadded>2002</yearadded>
  <monthadded>12</monthadded>
  <description><![CDATA[DXInstall is an example of how to use DirectXSetup interfaces to install the DirectX subsystem and DirectX drivers.  It shows how to use a callback function to present messages and get user input through a custom interface, in this case a simple modeless dialog box.]]></description>
  <folder>Samples\C++\Misc\DXInstall\</folder>
  <exefolder>Samples\C++\Misc\Bin\</exefolder>
  <exe>DxInstall.exe</exe>
  <doc>Documentation/DirectX9/directx_sdk.chm::/Dinstall_Sample.htm</doc>       
  <projectfile6>DXInstall.dsw</projectfile6>
  <projectfile7>DXInstall.sln</projectfile7>
  <install common="false" />
  <language>C++</language>
  <complexity>1120</complexity>
  <keywords>
    <keyword>DXInstall</keyword>
  </keywords>
  <visible>true</visible>
</sample><sample>
  <name>FirewallInstallHelper</name>
  <dxarea>System</dxarea>
  <type>sample</type>
  <yearadded>2005</yearadded>
  <monthadded>12</monthadded>
  <description><![CDATA[This sample DLL can be used with installers to register a game with the Windows firewall. See the article for details]]></description>
  <folder>Samples\C++\Misc\FirewallInstallHelper\</folder>
  <exefolder>Samples\C++\Misc\Bin\</exefolder>
  <screenshot>FirewallInstallHelper.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/Games_and_Firewalls.htm</doc>
  <projectfile6>FirewallInstallHelper.dsw</projectfile6>
  <projectfile7>FirewallInstallHelper.sln</projectfile7>
  <install common="false">
	<additional src="..\bin\x86\ExampleForFirewallInstall.exe" dest="ExampleForFirewallInstall.exe" />
	<reserved>FirewallEnabled</reserved>
  </install>
  <consoleapp>no</consoleapp>
  <language>C++</language>
  <complexity>1500</complexity>
  <dxsubarea />
  <visible>true</visible>
</sample><sample>
  <name>GameStatisticsExample</name>
  <dxarea>System</dxarea>
  <type>sample</type>
  <yearadded>2009</yearadded>
  <monthadded>3</monthadded>
  <description><![CDATA[This sample gets and sets game statistics viewed by the Windows 7 version of Game Explorer]]></description>
  <folder>Samples\C++\Misc\GameStatisticsExample\</folder>
  <exefolder>Samples\C++\Misc\Bin\</exefolder>
  <screenshot>GameStatisticsExample.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/gameexplorer_samples.htm</doc>
  <projectfile6>GameStatisticsExample.dsw</projectfile6>
  <projectfile7>GameStatisticsExample.sln</projectfile7>
  <install common="false">
        <additional src="..\bin\x86\GameStatisticsExample.exe" dest="GameStatisticsExample.exe" />
        <reserved>FirewallEnabled</reserved>
  </install>
  <consoleapp>yes</consoleapp>
  <language>C++</language>
  <complexity>100</complexity>
  <dxsubarea />
  <visible>true</visible>
</sample><sample>
  <name>GameuxInstallHelper</name>
  <dxarea>System</dxarea>
  <type>sample</type>
  <yearadded>2009</yearadded>
  <monthadded>8</monthadded>
  <description><![CDATA[This is a DLL with source that can be used directly with installers to register a game with the Windows Game Explorer. See the Windows Game Explorer Integration technical article for more details.]]></description>
  <folder>Samples\C++\Misc\GameuxInstallHelper\</folder>
  <exefolder>Samples\C++\Misc\Bin\</exefolder>
  <screenshot>GameuxInstallHelper.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/Windows_Game_Explorer_Integration.htm</doc>
  <projectfile6>GameuxInstallHelper.dsw</projectfile6>
  <projectfile7>GameuxInstallHelper.sln</projectfile7>
  <install common="false">
	<reserved>FirewallEnabled</reserved>
  </install>
  <consoleapp>no</consoleapp>
  <language>C++</language>
  <complexity>100</complexity>
  <dxsubarea />
  <visible>true</visible>
</sample><sample>
  <name>GDFExampleBinary</name>
  <dxarea>System</dxarea>
  <type>sample</type>
  <yearadded>2009</yearadded>
  <monthadded>3</monthadded>
  <description><![CDATA[This is an example DLL containing the GDF file for use with the the Windows Vista Games Explorer. See the article for details]]></description>
  <folder>Samples\C++\Misc\GDFExampleBinary\</folder>
  <exefolder>Samples\C++\Misc\Bin\</exefolder>
  <screenshot>GDFExampleBinary.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/Windows_Game_Explorer_Integration.htm</doc>
  <projectfile6>GDFExampleBinary.dsw</projectfile6>
  <projectfile7>GDFExampleBinary.sln</projectfile7>
  <install common="false">
	<reserved>FirewallEnabled</reserved>
  </install>
  <consoleapp>no</consoleapp>
  <language>C++</language>
  <complexity>1500</complexity>
  <dxsubarea />
  <visible>true</visible>
</sample><sample>
	<name>InstallOnDemand</name>
	<dxarea>System</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
  <yearadded>2004</yearadded>
  <monthadded>12</monthadded>
	<description>
	<![CDATA[This sample demonstrates two useful installation techniques for games: install-on-demand and background installation. The sample is broken up into features, and when it is installed, some features are advertised to reduce installation time. Then when the sample is run, advertised features can be installed in the background without interfering the user's experience.]]>
	</description>
	<folder>Samples\C++\Misc\InstallOnDemand\</folder>
	<exefolder>Samples\C++\Misc\Bin\</exefolder>
	<screenshot>InstallOnDemand.jpg</screenshot>
  	<doc>Documentation/DirectX9/directx_sdk.chm::/Install_on_Demand_for_Games.htm</doc>  	       	
	<projectfile7>InstallOnDemand.sln</projectfile7>
	<install dxut="true">
		<additional src="..\bin\x86\InstallOnDemand.exe" dest="InstallOnDemand.exe" />
		<media>Light Probes\galileo_cross.dds</media>
		<media>Light Probes\grace_cross.dds</media>
		<media>Light Probes\rnl_cross.dds</media>
		<media>Light Probes\stpeters_cross.dds</media>
		<media>Light Probes\uffizi_cross.dds</media>
		<media>PRT Demo\LandShark.x</media>
		<media>PRT Demo\speeder_diff.jpg</media>
		<media>Misc\seafloor.x</media>
		<media>Misc\seafloor.bmp</media>
		<createfile size="12000000">Level1 Placeholder Data\L1PH1.dat</createfile>
		<createfile size="12000000">Level1 Placeholder Data\L1PH2.dat</createfile>
		<createfile size="12000000">Level1 Placeholder Data\L1PH3.dat</createfile>
		<createfile size="12000000">Level1 Placeholder Data\L1PH4.dat</createfile>
		<createfile size="12000000">Level1 Placeholder Data\L1PH5.dat</createfile>
		<createfile size="12000000">Level2 Placeholder Data\L2PH1.dat</createfile>
		<createfile size="12000000">Level2 Placeholder Data\L2PH2.dat</createfile>
		<createfile size="12000000">Level2 Placeholder Data\L2PH3.dat</createfile>
		<createfile size="12000000">Level2 Placeholder Data\L2PH4.dat</createfile>
		<createfile size="12000000">Level2 Placeholder Data\L2PH5.dat</createfile>
		<createfile size="12000000">Level3 Placeholder Data\L3PH1.dat</createfile>
		<createfile size="12000000">Level3 Placeholder Data\L3PH2.dat</createfile>
		<createfile size="12000000">Level3 Placeholder Data\L3PH3.dat</createfile>
		<createfile size="12000000">Level3 Placeholder Data\L3PH4.dat</createfile>
		<createfile size="12000000">Level3 Placeholder Data\L3PH5.dat</createfile>
		<createfile size="12000000">Level4 Placeholder Data\L4PH1.dat</createfile>
		<createfile size="12000000">Level4 Placeholder Data\L4PH2.dat</createfile>
		<createfile size="12000000">Level4 Placeholder Data\L4PH3.dat</createfile>
		<createfile size="12000000">Level4 Placeholder Data\L4PH4.dat</createfile>
		<createfile size="12000000">Level4 Placeholder Data\L4PH5.dat</createfile>
		<createfile size="12000000">Level5 Placeholder Data\L5PH1.dat</createfile>
		<createfile size="12000000">Level5 Placeholder Data\L5PH2.dat</createfile>
		<createfile size="12000000">Level5 Placeholder Data\L5PH3.dat</createfile>
		<createfile size="12000000">Level5 Placeholder Data\L5PH4.dat</createfile>
		<createfile size="12000000">Level5 Placeholder Data\L5PH5.dat</createfile>
	</install>
	<language>C++</language>
	<complexity>1250</complexity>
	<keywords>
		<keyword>IDirect3DDevice9</keyword>
		<keyword>IDirect3D9</keyword>
		<keyword>MSI</keyword>
		<keyword>Installer</keyword>
		<keyword>Windows</keyword>
	</keywords>
<visible>true</visible></sample><sample>
    <visible>true</visible>
    <name>ParentalControlTimeLimits</name>
    <dxarea>System</dxarea>
    <dxsubarea></dxsubarea>
    <type>sample</type>
    <yearadded>2007</yearadded>
    <monthadded>6</monthadded>
    <description>
        <![CDATA[The Time Limits feature in Windows Parental Controls enables a parent to control the time their child spends on the computer.  A game or application should be "time limit aware" and provide appropriate feedback to a user whose account is under time restrictions.  This sample demonstrates how an application can obtain the Windows Parental Control Time Limit information for the current user.]]>
    </description>
    <folder>Samples\C++\Misc\ParentalControlTimeLimits\</folder>
    <exefolder>Samples\C++\Misc\Bin\</exefolder>
    <exe>ParentalControlTimeLimits.exe</exe>
    <screenshot>ParentalControlTimeLimits.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/TimeLimits_Sample.htm</doc>  	     
    <projectfile7>ParentalControlTimeLimits_2003.sln</projectfile7>
    <install dxut="true" />
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
        <keyword>Parental Controls</keyword>
    </keywords>
</sample>
<sample>
   <name>PIX Plugin Sample</name>
   <dxarea>Direct3D</dxarea>
   <type>sample</type>
  <yearadded>2004</yearadded>
  <monthadded>7</monthadded>
   <description>The PIX Plugin Sample shows how to implement a plugin for the PIX for Windows tool, allowing you to define your own counters.</description>
   <folder>Samples\C++\Misc\PIXPluginSample\</folder>
   <exefolder/>
   <exe/>
   <screenshot>PIXPluginSample.jpg</screenshot>
   <projectfile7>PIXPluginSample.sln</projectfile7>
   <install common="false"/>
   <language>C++</language>
   <complexity>1500</complexity>
   <keywords>
      <keyword>PIX</keyword>
      <keyword>Plugin</keyword>
      <keyword>utilities</keyword>
   </keywords>
<visible>true</visible></sample>
<sample>
  <name>ProviderGDFExampleBinary</name>
  <dxarea>System</dxarea>
  <type>sample</type>
  <yearadded>2009</yearadded>
  <monthadded>3</monthadded>
  <description><![CDATA[This is an example DLL containing the GDF file of a provider for use with the Windows 7 Games Explorer. See the article for details]]></description>
  <folder>Samples\C++\Misc\ProviderGDFExampleBinary\</folder>
  <exefolder>Samples\C++\Misc\Bin\</exefolder>
  <screenshot>ProviderGDFExampleBinary.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/Windows_Game_Explorer_Integration.htm</doc>
  <projectfile6>ProviderGDFExampleBinary.dsw</projectfile6>
  <projectfile7>ProviderGDFExampleBinary.sln</projectfile7>
  <install common="false">
        <reserved>FirewallEnabled</reserved>
  </install>
  <consoleapp>no</consoleapp>
  <language>C++</language>
  <complexity>1500</complexity>
  <dxsubarea />
  <visible>true</visible>
</sample><sample>
  <name>VideoMemory</name>
  <dxarea>System</dxarea>
  <type>sample</type>
  <yearadded>2008</yearadded>
  <monthadded>3</monthadded>
  <description><![CDATA[The VideoMemory sample shows how to get the amount of video memory through various different methods.]]></description>
  <folder>Samples\C++\Misc\VideoMemory\</folder>
  <exefolder>Samples\C++\Misc\Bin\</exefolder>
  <exe>VideoMemory.exe</exe>
  <doc>Documentation/DirectX9/directx_sdk.chm::/VideoMemory_Sample.htm</doc>
  <screenshot>VideoMemory.jpg</screenshot>
  <projectfile6>VideoMemory.dsw</projectfile6>
  <projectfile7>VideoMemory.sln</projectfile7>
  <install common="false">
		<reserved>DDSCAPS_VIDEOMEMORY</reserved>
		<reserved>DedicatedVideoMemory</reserved>
  </install>  
  <language>C++</language>
  <consoleapp>yes</consoleapp>
  <complexity>100</complexity>
  <keywords>
    <keyword>VideoMemory</keyword>
  </keywords>
  <dxsubarea />
  <visible>true</visible>
</sample><sample>
  <name>XACT Tutorial 1: Play cue</name>
  <dxarea>Audio</dxarea>
  <dxsubarea>Tutorials</dxsubarea>
  <type>tutorial</type>
  <yearadded>2008</yearadded>
  <monthadded>3</monthadded>
  <description><![CDATA[The Play Cue tutorial is the first tutorial for using XACT.]]></description>
  <folder>Samples\C++\XACT\Tutorials\Tut01_PlayCue\</folder>
  <exefolder>Samples\C++\XACT\Bin\</exefolder>
  <exe>Tut01_PlayCue.exe</exe>
  <screenshot>Tut01_PlayCue.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/audio_xact_tutorials_api1.htm</doc>
  <projectfile6>Tut01_PlayCue.dsw</projectfile6>
  <projectfile7>Tut01_PlayCue.sln</projectfile7>
  <install name="Tut01_PlayCue" common="false">
    <reserved>Tut01_PlayCue(</reserved>
  </install>
  <language>C++</language>
  <complexity>11</complexity>
  <keywords>
    <keyword>XACT</keyword>
  </keywords>
  <visible>true</visible>
</sample><sample>
  <name>XACT Tutorial 2: Streaming</name>
  <dxarea>Audio</dxarea>
  <dxsubarea>Tutorials</dxsubarea>
  <type>tutorial</type>
  <yearadded>2008</yearadded>
  <monthadded>3</monthadded>
  <description><![CDATA[The Streaming tutorial is the 2nd XACT API tutorial covers how to load and use streaming audio data in XACT.]]></description>
  <folder>Samples\C++\XACT\Tutorials\Tut02_Stream\</folder>
  <exefolder>Samples\C++\XACT\Bin\</exefolder>
  <exe>Tut02_Stream.exe</exe>
  <screenshot>Tut02_Stream.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/audio_xact_tutorials_api2.htm</doc>
  <projectfile6>Tut02_Stream.dsw</projectfile6>
  <projectfile7>Tut02_Stream.sln</projectfile7>
  <install name="Tut02_Stream" common="false">
    <reserved>Tut02_Stream(</reserved>
  </install>
  <language>C++</language>
  <complexity>11</complexity>
  <keywords>
    <keyword>XACT</keyword>
  </keywords>
  <visible>true</visible>
</sample><sample>
  <name>XACT Tutorial 3: Categories and Variables</name>
  <dxarea>Audio</dxarea>
  <dxsubarea>Tutorials</dxsubarea>
  <type>tutorial</type>
  <yearadded>2008</yearadded>
  <monthadded>3</monthadded>
  <description><![CDATA[The Categories and Varibles tutorial is the 3nd XACT API tutorial covers how to load and use XACT categories to control sets of sounds and varibles to give the audio designer more control.]]></description>
  <folder>Samples\C++\XACT\Tutorials\Tut03_Variable\</folder>
  <exefolder>Samples\C++\XACT\Bin\</exefolder>
  <exe>Tut03_Variable.exe</exe>
  <screenshot>Tut03_Variable.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/audio_xact_tutorials_api3.htm</doc>
  <projectfile6>Tut03_Variable.dsw</projectfile6>
  <projectfile7>Tut03_Variable.sln</projectfile7>
  <install name="Tut03_Variable" common="false">
    <reserved>Tut03_Variable(</reserved>
  </install>
  <language>C++</language>
  <complexity>11</complexity>
  <keywords>
    <keyword>XACT</keyword>
  </keywords>
  <visible>true</visible>
</sample><sample>
  <name>XACTCodeDriven</name>
  <dxarea>Audio</dxarea>
  <type>sample</type>
  <yearadded>2008</yearadded>
  <monthadded>3</monthadded>
  <description><![CDATA[This sample shows how to use the XACT code-driven API to load and play a wave file without using the XACT authoring tool.]]></description>
  <folder>Samples\C++\XACT\XACTCodeDriven\</folder>
  <exefolder>Samples\C++\XACT\Bin\</exefolder>
  <exe>XACTCodeDriven.exe</exe>
  <screenshot>XACTCodeDriven.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/audio_xact_tutorials_XACTCodeDriven.htm</doc>
  <projectfile6>XACTCodeDriven.dsw</projectfile6>
  <projectfile7>XACTCodeDriven.sln</projectfile7>
  <install name="XACTCodeDriven" common="true">
  </install> 
  <language>C++</language>
  <complexity>501</complexity>
  <keywords>
    <keyword>XACT</keyword>
  </keywords>
  <visible>true</visible>
</sample><sample>
  <name>XACTGame</name>
  <dxarea>Audio</dxarea>
  <type>sample</type>
  <yearadded>2008</yearadded>
  <monthadded>3</monthadded>
  <description><![CDATA[A simple XACT based game that demonstrates how to integrate Direct3D with XACT.]]></description>
  <folder>Samples\C++\XACT\XACTGame\</folder>
  <exefolder>Samples\C++\XACT\Bin\</exefolder>
  <exe>XACTGame.exe</exe>
  <screenshot>XACTGame.jpg</screenshot>
  	<doc>Documentation/DirectX9/directx_sdk.chm::/audio_xact_tutorials_gamesample.htm</doc>  	  
  <projectfile6>XACTGame.dsw</projectfile6>
  <projectfile7>XACTGame.sln</projectfile7>
  <install name="XACTGame" dxut="true">
  </install> 
  <language>C++</language>
  <complexity>1101</complexity>
  <keywords>
    <keyword>XACT</keyword>
  </keywords>
  <visible>true</visible>
</sample><sample>
  <name>XAudio2BasicSound</name>
  <dxarea>Audio</dxarea>
  <type>sample</type>
  <consoleapp>yes</consoleapp>
  <yearadded>2008</yearadded>
  <monthadded>03</monthadded>
  <description><![CDATA[This sample shows how to setup the XAudio2 engine and play wave files]]></description>
  <folder>Samples\C++\XAudio2\XAudio2BasicSound\</folder>
  <exefolder>Samples\C++\XAudio2\Bin\</exefolder>
  <exe>XAudio2BasicSound.exe</exe>
  <screenshot>XAudio2BasicSound.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/xaudio2_sample_basicsound.htm</doc>
  <projectfile6>XAudio2BasicSound.dsw</projectfile6>
  <projectfile7>XAudio2BasicSound.sln</projectfile7>
  <install name="XAudio2BasicSound" dxut="true">
      <media>Wavs</media>
  </install> 
  <language>C++</language>
  <complexity>501</complexity>
  <keywords>
    <keyword>XAudio2</keyword>
  </keywords>
  <visible>true</visible>
</sample><sample>
  <name>XAudio2BasicStream</name>
  <dxarea>Audio</dxarea>
  <type>sample</type>
  <consoleapp>yes</consoleapp>
  <yearadded>2008</yearadded>
  <monthadded>3</monthadded>
  <description><![CDATA[Demonstrates streaming using asynchronous file I/O and the XAudio2 API]]></description>
  <folder>Samples\C++\XAudio2\XAudio2BasicStream\</folder>
  <exefolder>Samples\C++\XAudio2\Bin\</exefolder>
  <exe>XAudio2BasicStream.exe</exe>
  <screenshot>XAudio2BasicStream.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/xaudio2_sample_basicstream.htm</doc>
  <projectfile6>XAudio2BasicStream.dsw</projectfile6>
  <projectfile7>XAudio2BasicStream.sln</projectfile7>
  <install name="XAudio2BasicStream">
      <media>Wavs</media>
  </install> 
  <language>C++</language>
  <complexity>501</complexity>
  <keywords>
    <keyword>XAudio2</keyword>
  </keywords>
  <visible>true</visible>
</sample><sample>
  <name>XAudio2CustomAPO</name>
  <dxarea>Audio</dxarea>
  <type>sample</type>
  <yearadded>2008</yearadded>
  <monthadded>6</monthadded>
  <description><![CDATA[Demonstrates how to create custom audio processing objects (APOs) from a library of optimized DSP building blocks]]></description>
  <folder>Samples\C++\XAudio2\XAudio2CustomAPO\</folder>
  <exefolder>Samples\C++\XAudio2\Bin\</exefolder>
  <exe>XAudio2CustomAPO.exe</exe>
  <screenshot>XAudio2CustomAPO.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/xaudio2_sample_customapo.htm</doc>
  <projectfile6>XAudio2CustomAPO.dsw</projectfile6>
  <projectfile7>XAudio2CustomAPO.sln</projectfile7>
  <install name="XAudio2CustomAPO" dxut="true">
      <media>Wavs</media>
  </install> 
  <language>C++</language>
  <complexity>1110</complexity>
  <keywords>
    <keyword>XAudio2</keyword>
    <keyword>APO</keyword>
  </keywords>
  <visible>true</visible>
</sample><sample>
  <name>XAudio2Sound3D</name>
  <dxarea>Audio</dxarea>
  <type>sample</type>
  <yearadded>2008</yearadded>
  <monthadded>3</monthadded>
  <description><![CDATA[This sample shows how to use the X3DAudio API with XAudio2 to play spatialized audio including I3DL2 reverb effects.]]></description>
  <folder>Samples\C++\XAudio2\XAudio2Sound3D\</folder>
  <exefolder>Samples\C++\XAudio2\Bin\</exefolder>
  <exe>XAudio2Sound3D.exe</exe>
  <screenshot>XAudio2Sound3D.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/xaudio2_sample_sound3d.htm</doc>
  <projectfile6>XAudio2Sound3D.dsw</projectfile6>
  <projectfile7>XAudio2Sound3D.sln</projectfile7>
  <install name="XAudio2Sound3D" dxut="true">
      <media>Wavs</media>
  </install> 
  <language>C++</language>
  <complexity>1110</complexity>
  <keywords>
    <keyword>XAudio2</keyword>
    <keyword>X3DAudio</keyword>
  </keywords>
  <visible>true</visible>
</sample><sample>
	<name>XInput AudioController</name>
	<dxarea>Input</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2005</yearadded>
    <monthadded>10</monthadded>
	<description><![CDATA[This sample uses XInput and DirectSound to read the headset microphone and play it back on the headset for each of the controllers.]]></description>
	<folder>Samples\C++\XInput\AudioController\</folder>
	<exefolder>Samples\C++\XInput\Bin\</exefolder>
	<exe>AudioController.exe</exe>
  	<doc>Documentation/DirectX9/directx_sdk.chm::/dx9_xinput_tutorials_and_samples.htm</doc>  	     	
	<screenshot>AudioController.jpg</screenshot>
	<projectfile7>AudioController.sln</projectfile7>
	<install common="false">
	</install>
	<language>C++</language>
	<complexity>1510</complexity>
	<keywords>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>XInput RumbleController</name>
	<dxarea>Input</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2005</yearadded>
    <monthadded>10</monthadded>
	<description><![CDATA[This sample shows how to set the rumble amount on each of the 4 controllers.]]></description>
	<folder>Samples\C++\XInput\RumbleController\</folder>
  	<doc>Documentation/DirectX9/directx_sdk.chm::/dx9_xinput_tutorials_and_samples.htm</doc>  	     	
	<exefolder>Samples\C++\XInput\Bin\</exefolder>
	<exe>RumbleController.exe</exe>
	<screenshot>RumbleController.jpg</screenshot>
	<projectfile7>RumbleController.sln</projectfile7>
	<install common="false">
	</install>
	<language>C++</language>
	<complexity>150</complexity>
	<keywords>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>XInput SimpleController</name>
	<dxarea>Input</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2005</yearadded>
    <monthadded>10</monthadded>
	<description><![CDATA[This sample uses XInput and visually displays the state of each of the 4 controllers.]]></description>
	<folder>Samples\C++\XInput\SimpleController\</folder>
	<exefolder>Samples\C++\XInput\Bin\</exefolder>
	<exe>SimpleController.exe</exe>
	<screenshot>SimpleController.jpg</screenshot>
  	<doc>Documentation/DirectX9/directx_sdk.chm::/dx9_xinput_tutorials_and_samples.htm</doc>  	     	
    <projectfile7>SimpleController.sln</projectfile7>	
	<install common="false">
	</install>
	<language>C++</language>
	<complexity>110</complexity>
	<keywords>
	</keywords>
    <visible>true</visible>
</sample>
<sample>
	<name>XInputGame</name>
	<dxarea>Input</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
    <yearadded>2005</yearadded>
    <monthadded>10</monthadded>
	<description><![CDATA[This sample shows how to combine Direct3D and XInput as well as how to handle unplugged controllers.]]></description>
	<folder>Samples\C++\XInput\XInputGame\</folder>
	<exefolder>Samples\C++\XInput\Bin\</exefolder>
	<exe>XInputGame.exe</exe>
  	<doc>Documentation/DirectX9/directx_sdk.chm::/dx9_xinput_tutorials_and_samples.htm</doc>  	     	
	<screenshot>XInputGame.jpg</screenshot>
	<projectfile7>XInputGame.sln</projectfile7>
	<install dxut="true">
	</install>
	<language>C++</language>
	<complexity>2050</complexity>
	<keywords>
    </keywords>
    <visible>true</visible>
</sample>
<sample updated="true">
	<name>DirectX Developer Center</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
	<description>
	<![CDATA[Please visit the online DirectX Developer Center for additional resources, including new and updated samples, white papers, technical articles, online documentation, and archives of presentations from DirectX development events.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
        <link name="DirectX Developer Center"><![CDATA[http://msdn.microsoft.com/directx]]></link>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>1500</complexity>
	<visible>true</visible>
</sample>
<sample>
	<name>Debugging with Symbols</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
    <yearadded>2007</yearadded>
    <monthadded>8</monthadded>
	<description>
	<![CDATA[This paper provides a high level overview of how to best use symbols in your debugging process. It explains how to use the Microsoft symbol server, and also how to set up and use your own private symbol server. These best practices can help increase your effectiveness and ability to debug issues, even in cases where all the symbols and executable files that are related to a problem are not located on your computer.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/Debugging_with_Symbols.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>1500</complexity>
	<visible>true</visible>
</sample>

<sample>
	<name>Lockless Programming Considerations for Xbox 360 and Microsoft Windows</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
    <yearadded>2008</yearadded>
    <monthadded>6</monthadded>
	<description>
	<![CDATA[Lockless programming is a way to safely share changing data between multiple threads without the cost of acquiring and releasing locks. This sounds like a panacea, but lockless programming is complex and subtle, and sometimes doesn't give the benefits that it promises. This paper gives an overview of some of the issues to consider when trying to use lockless programming techniques.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/lockless_programming.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>1500</complexity>
	<visible>true</visible>
</sample>

<sample updated="true">
	<name>Games for Windows Test Requirements</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
    <yearadded>2010</yearadded>
    <monthadded>6</monthadded>
	<description>
	<![CDATA[These are the Games for Windows test requirements for the best experience on Windows XP, Windows Vista, and Windows 7.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/Games_for_Windows_Test_Requirements_1_0_0006.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>1500</complexity>
	<visible>true</visible>
</sample>

<sample  updated="true">
	<name>Games for Windows Technical Requirements</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
    <yearadded>2010</yearadded>
    <monthadded>6</monthadded>
	<description>
	<![CDATA[These are the Games for Windows technical requirements for the best experience on Windows XP, Windows Vista, and Windows 7.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/Games_for_Windows_Technical_Requirements_1_1_0006.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>1500</complexity>
	<visible>true</visible>
</sample>

<sample>
	<name>DirectX Installation for Game Developers</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
    <yearadded>2006</yearadded>
    <monthadded>12</monthadded>
	<description>
	<![CDATA[This article is intended to address some of the common questions about the DirectX runtime and using DirectSetup to install DirectX. It discusses the DirectX runtime, the DirectX version number, the DirectX libraries, best practices for installing DirectX, and how to deploy the DirectX debug runtime.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/DirectX_Setup_for_Game_Developers.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>1500</complexity>
	<visible>true</visible>
</sample>

<sample>
	<name>Graphics APIs in Window</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
    <yearadded>2006</yearadded>
    <monthadded>8</monthadded>
	<description>
	<![CDATA[Windows Vista and Windows 7 include support for a major revision in the design of video drivers since the introduction of the Windows Driver Model (WDM) for Windows 98. This redesigned model reflects the evolution of video hardware from the world of 2D raster operations and GDI applications, to that of 3D games with fixed-function graphics hardware, to that of the modern programmable graphical processing unit (GPU) that supports a wide-range of high-performance graphics applications.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/Graphics_APIs_in_Windows_Vista.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>201</complexity>
	<visible>true</visible>
</sample>

<sample>
	<name>Making Video Games Accessible - Business Justifications and Design Considerations</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
    <yearadded>2006</yearadded>
    <monthadded>8</monthadded>
	<description>
	<![CDATA[Game publishers and developers love to focus on features that will get their titles noticed by the mainstream gaming community, such as graphics and audio. But there is another audience, eager to take part in these games as well. These gamers come from the accessibility community - a community of people with disabilities, as well as those who care about their welfare. This paper is for game content developers and producers who want to reach this market by adding basic accessibility features to help people with disabilities or impairments.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/accessibility_best_practices.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>201</complexity>
	<visible>true</visible>
</sample>

<sample>
	<name>Coding For Multiple Cores on Xbox 360 and Microsoft Windows</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
    <yearadded>2006</yearadded>
    <monthadded>8</monthadded>
	<description>
	<![CDATA[The increases in available processing power are just as dramatic as in the past, but now developers have to write multithreaded code in order to use this power. Multi-threaded programming brings with it new design and programming challenges. This paper gives some advice on how to get started with multithreaded programming.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/coding_for_multiple_cores.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>1501</complexity>
	<visible>true</visible>
</sample>

<sample>
	<name>Top Tools and Techniques for Making More Robust Windows Games</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
    <yearadded>2006</yearadded>
    <monthadded>4</monthadded>
	<description>
	<![CDATA[One of the more undesirable costs facing game production is support calls. Each time a user has to contact customer support it takes away profit from the game. While some calls to customer support are not preventable, others can be eliminated or reduced by employing good development practices. To help reduce the number of support calls, developers can implement various tools and techniques described in this article. The following section describes the advantages of integrating certain tools and implementing certain techniques into a studio's development and testing methods. All tools described are free and all techniques are simple enough to add to most development methods.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/Top_Tools_and_Techniques_for_making_more_robust_Windows_Game.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>501</complexity>
	<visible>true</visible>
</sample>

<sample>
	<name>Taking Advantage of High DPI Mouse Movement</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
    <yearadded>2006</yearadded>
    <monthadded>4</monthadded>
	<description>
	<![CDATA[A number of companies are manufacturing high DPI mouse devices such as Microsoft and Logitech. With the increasing popularity of high DPI mouse devices it is important that developers understand how to utilize the information generated by these devices optimally. This article focuses on the best way to optimize the performance of mouse input in games like First Person Shooters.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/Taking_advantage_of_high_DPI_mouse_movement.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>501</complexity>
	<visible>true</visible>
</sample>

<sample>
	<name>Patching Methods in Windows XP, Windows Vista, and Windows 7</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
    <yearadded>2006</yearadded>
    <monthadded>4</monthadded>
	<description>
	<![CDATA[Windows Vista adds a number of features to make the operating system more secure. The added security means that patching is not as simple as on previous platforms. This article will take a look at some patching methods that will work well in Windows Vista and Windows XP.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/Patching_Methods_in_Windows_XP_and_Vista.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>1501</complexity>
	<visible>true</visible>
</sample>

<sample>
	<name>Optimizing DVD performance for Windows Games</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
  <yearadded>2006</yearadded>
  <monthadded>4</monthadded>
	<description>
	<![CDATA[Today, a high percentage of Windows computers have a DVD drive and many upcoming Windows games are shipping on DVD. It is important for game developers to ensure they use the DVD drive to its full advantage. By understanding how data is read from a DVD and how the data's location affects the read time, the developer can reduce load times and help improve the overall game performance during game play.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/Optimizing_DVD_performance_for_Windows_Games.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>2501</complexity>
	<visible>true</visible>
</sample>

<sample>
	<name>64-bit programming for Game Developers</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
  <yearadded>2006</yearadded>
  <monthadded>4</monthadded>
	<description>
	<![CDATA[Processor manufacturers are already shipping 64-bit processors for the desktop market and they are planning to stop manufacturing 32-bit processors sometime this year (2006). It is important for game developers to take advantage of the improvements that 64-bit processors offer and ensure their legacy applications run correctly on the new processors and 64-bit Windows platforms. This article will address compatibility and porting issues and help developers ease their transition to 64-bit.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/sixty_four_bit_programming_for_Game_Developers.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>1501</complexity>
	<visible>true</visible>
</sample>

<sample>
	<name>Simplifying Game Installation</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
  <yearadded>2005</yearadded>
  <monthadded>12</monthadded>
	<description>
	<![CDATA[This article will outline some installation process improvements to help improve the overall experience of Windows games.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/Simplifying_Game_Installation.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>1501</complexity>
	<visible>true</visible>
</sample>

<sample>
	<name>Windows Game Explorer for Game Developers</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
    <yearadded>2009</yearadded>
    <monthadded>3</monthadded>
	<description>
	<![CDATA[Windows Vista improves the gaming experience on Windows by including a Game Explorer. The Game Explorer is a located right off the Start menu and provides a central location for installed games. This article outlines the process registering a game with the Game Explorer and parental controls.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/Windows_Game_Explorer_Integration.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>1501</complexity>
	<visible>true</visible>
</sample>

<sample>
	<name>Game Timing and Multicore Processors</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
  <yearadded>2005</yearadded>
  <monthadded>12</monthadded>
	<description>
	<![CDATA[With power management technologies becoming more commonplace in today's computers, a commonly-used method to obtain high-resolution CPU timings, the RDTSC instruction, may no longer work as expected. This article suggests a more accurate, reliable solution using the Windows QueryPerformanceCounter and QueryPerformanceFrequency APIs.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/Game_Timing_and_Multicore_Processors.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>1501</complexity>
	<visible>true</visible>
</sample>

<sample>
	<name>Authenticode Signing for Game Developers</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
  <yearadded>2006</yearadded>
  <monthadded>12</monthadded>
	<description>
	<![CDATA[Security is becoming increasingly important for game developers. Microsoft Authenticode enables end users and the operating system to verify that the code comes from the rightful owner and that it hasn't been maliciously altered or accidentally corrupted. Windows Vista has a number of features such as parental controls that require Windows games to be properly signed to ensure the data has not been tampered. This article discusses how to get started with a test certificate, where to get a public certificate, and how to integrate this into a daily build process.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/Authenticode_Signing_for_Game_Developers.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>1501</complexity>
	<visible>true</visible>
</sample>

<sample>
	<name>Best Security Practices in Game Development</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
  <yearadded>2007</yearadded>
  <monthadded>2</monthadded>
	<description>
	<![CDATA[An increasing number of people play online games and games with user-made content. This, combined with the increasing security of the Windows Operating System, means that games are a growing and more tempting target for attackers to exploit. Game developers should place a strong emphasis on making sure the games they release arent creating new security holes for attackers to exploit. This article outlines and explains some common methods and tools to increase code security without over-inflating development time.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/Best_Security_Practices_in_Game_Development.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>1501</complexity>
	<visible>true</visible>
</sample>

<sample>
	<name>Crash Dump Analysis</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
  <yearadded>2005</yearadded>
  <monthadded>12</monthadded>
	<description>
	<![CDATA[This article discuss how to capture a crash dump using the MiniDumpWriteDump API.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/Crash_Dump_Analysis.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>1501</complexity>
	<visible>true</visible>
</sample>

<sample>
	<name>Resource Management Best Practices</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
  <yearadded>2005</yearadded>
  <monthadded>6</monthadded>
	<description>
	<![CDATA[This article will discuss best practices for dealing with resources generally, how managed and unmanaged resources behave, and provide some detail on how resources are typically handled by the runtime and drivers.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/Resource_Management_Best_Practices.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>1501</complexity>
	<visible>true</visible>
</sample>

<sample>
	<name>Disabling Shortcut Keys in Games</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
  <yearadded>2004</yearadded>
  <monthadded>12</monthadded>
	<description>
	<![CDATA[This document describes how to temporarily disable Microsoft Windows keyboard shortcuts to prevent disruption of game play for full screen games. The SHIFT key and the CTRL key are often used as fire or run buttons in games. Accidentally pressing the Windows key (located near these keys) can cause the user to suddenly jump out of the application, ruining the game experience. Simply using the SHIFT key as a game button can inadvertently execute the StickyKeys shortcut which may display a warning dialog. To avoid these issues, you should disable these keys when running in full-screen mode, and either enable the keys back to their default handlers when running in windowed mode or exit the application.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/Disabling_Shortcut_Keys_in_Games.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>1501</complexity>
	<visible>true</visible>
</sample>

<sample>
	<name>Windows Firewall for Game Developers</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
    <yearadded>2006</yearadded>
    <monthadded>12</monthadded>
	<description>
	<![CDATA[The improved security brought by Microsoft Windows XP Service Pack 2 (SP2) also brings a new complication for multiplayer games: the firewall. This article describes the new firewall, why it exists, what it accomplishes, and how it does so. Most importantly, it describes how to configure your application to work well with the firewall.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/games_and_firewalls.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>1500</complexity>
	<visible>true</visible>
</sample>

<sample>
	<name>User Account Control for Game Developers</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
    <yearadded>2006</yearadded>
    <monthadded>12</monthadded>
	<description>
	<![CDATA[The User Account Control (UAC) security feature, introduced in Windows Vista, is designed to help prevent malicious attackers from using weaknesses or bugs found in widely-used applications to alter the operating system or other installed programs. This article describes the guidelines and best practices for game developers to work effectively with the User Account Control security feature introduced in Windows Vista.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/User_Account_Control_for_Game_Developers.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>500</complexity>
	<visible>true</visible>
</sample>

<sample>
	<name>Install-on-Demand for Games</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
  <yearadded>2004</yearadded>
  <monthadded>12</monthadded>
	<description>
	<![CDATA[This technical article discusses two techniques, install-on-demand and background install, using Windows Installer. Games can utilize these installation techniques to provide a better and more pleasant gaming experience for players by reducing the installation time.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/Install_on_Demand_for_Games.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>1500</complexity>
	<visible>true</visible>
</sample>

<sample>
	<name>Introduction to the 10-Foot Experience for Windows Game Developers</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
  <yearadded>2005</yearadded>
  <monthadded>4</monthadded>
	<description>
	<![CDATA[This article offers a first look at the 10-foot experience and Windows XP Media Center Edition from the perspective of a Windows game developer.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/Introduction_to_the_10_Foot_Experience_for_Windows_Game_Developers.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>500</complexity>
	<visible>true</visible>
</sample>

<sample>
	<name>Top Issues for Windows Titles</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
  <yearadded>2006</yearadded>
  <monthadded>12</monthadded>
	<description>
	<![CDATA[The Microsoft Windows Gaming and Graphics Technologies Developer Relations group performs performance analysis for many Windows games each year. During these sessions, we get hands-on experience to tie into the developer feedback and queries we receive daily. Occasionally we help track down a mysterious crash or other problem in a title, which gives us further insight into problems PC developers are encountering. This document highlights many of the common issues we've seen in current generation PC games.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/Top_Issues_for_Windows_Titles.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>1500</complexity>
	<visible>true</visible>
</sample>

<sample>
	<name>Using an Input Method Editor in a Game</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
  <yearadded>2004</yearadded>
  <monthadded>12</monthadded>
	<description>
	<![CDATA[An Input Method Editor (IME) is a program that allows easy text entry using a standard keyboard for East Asian languages such as Chinese, Japanese, Korean, and other languages with complex characters. For example, with IMEs a user can type complex characters in a word processor, or a player of a massive multiplayer online game can chat with friends in complex characters.  This topic explains how you can implement a basic IME edit control in a full-screen Microsoft DirectX application. Applications that take advantage of the DirectX Sample Framework automatically get IME functionality. For applications that do not make use of the framework, this topic describes how to add IME support to an edit control.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/Using_an_Input_Method_Editor_in_a_Game.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>2500</complexity>
	<visible>true</visible>
</sample>

<sample>
	<name>Installing and Using an Input Method Editor</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
  <yearadded>2004</yearadded>
  <monthadded>12</monthadded>
	<description>
	<![CDATA[This article offers a tutorial for how to install and use the standard Windows Input Method Editor (IME).]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/Installing_and_Using_Input_Method_Editors.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>500</complexity>
	<visible>true</visible>
</sample>

<sample>
	<name>DirectX 9.0 Frequently Asked Questions</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
  <yearadded>2006</yearadded>
  <monthadded>12</monthadded>
	<description>
	<![CDATA[This is a collection of Frequently Asked Questions (FAQ) about Microsoft DirectX 9.0]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/DirectX_9_Frequently_Asked_Questions.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>500</complexity>
	<visible>true</visible>
</sample>

<sample external="true">
	<name>Rthdribl</name>
	<dxarea>Direct3D</dxarea>
	<dxsubarea></dxsubarea>
	<type>sample</type>
	<description>
	<![CDATA[Masaki Kawase's Rthdribl sample demonstrates "Real-time High Dynamic Range Image-Based Lighting". DirectX 9.0 high-precision texture formats and version-2.0 of Pixel Shader represent real-time true HDR rendering. 
Technical features of the demo are: True HDR (High-Dynamic Range) Rendering, IBL (Image-Based Lighting), Glare Generation (Afterimage, Bloom, Halo, Ghost, and Star), Automatic Exposure Adjustment, Iris shaped Depth of Field blur, Realistic Motion Blur, FSAA (Full-Scene Anti-Alias), Fresnel Effect (Specular Reflectance) etc. This URL link will redirect you to an external web site and is provided for informational purposes only. Microsoft makes no warranties, express or implied, with respect to this external web site or the information contained in it.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<link name="External Website"><![CDATA[http://go.microsoft.com/fwlink/?LinkId=24919]]></link>
	<screenshot>rthdribl.jpg</screenshot>
	<doc></doc>
	<projectfile6></projectfile6>
	<projectfile7></projectfile7>
	<language>C++</language>
	<complexity>3000</complexity>
	<keywords></keywords>
	<visible>true</visible>
</sample>

<sample>
	<name>Installation Best Practices for Massively Multiplayer Online Games</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
  <yearadded>2007</yearadded>
  <monthadded>2</monthadded>
	<description>
	<![CDATA[This document describes creating a chain of trust design for MMOG client installation and custom game update systems which works well with the Windows operating system and the new Windows Vista security model. The approach is designed to enable patching of MMOG titles while supporting standard user accounts which have restricted access to the hard drive and system registry."]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/MMO_installation_best_practices.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>1502</complexity>
	<visible>true</visible>
</sample>

<sample>
	<name>Direct3D 10 Frequently Asked Questions</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
  <yearadded>2008</yearadded>
  <monthadded>6</monthadded>
	<description>
	<![CDATA[This is a collection of Frequently Asked Questions (FAQ) about Microsoft Direct3D 10.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/Direct3D10_Frequently_Asked_Questions.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>510</complexity>
	<visible>true</visible>
</sample>

<sample>
	<name>DXGI Best Practices</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
  <yearadded>2008</yearadded>
  <monthadded>6</monthadded>
	<description>
	<![CDATA[This document describes the best practices for using the DirectX Graphics Infrastructure (DXGI) in real-world applications.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/DXGI_Best_Practices.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>520</complexity>
	<visible>true</visible>
</sample>

<sample>
	<name>Direct3D 11 Deployment for Game Developers</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
    <yearadded>2009</yearadded>
    <monthadded>8</monthadded>
	<description>
	<![CDATA[This document describes the deployment requirements for Direct3D 11 applications.]]>
	</description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<doc>Documentation/DirectX9/directx_sdk.chm::/Direct3D11_Deployment.htm</doc>
	<screenshot>article.jpg</screenshot>
	<language></language>
	<complexity>1501</complexity>
	<visible>true</visible>
</sample>

<!-- Windows7/Direct3D11-related external samples and articles -->

<sample external="true">
	<name>Direct2D</name>
	<dxarea>Direct3D11</dxarea>
	<type>sample</type>
	<description><![CDATA[Direct2D is a hardware-accelerated, immediate-mode, 2-D graphics API that provides high performance and high quality
rendering for 2-D geometry, bitmaps, and text. The Direct2D API is designed to interoperate well with GDI, GDI+, and Direct3D. Direct2D is included
as part of the Direct3D 11 Runtime. Headers and libraries for Direct2D are available in the Windows SDK.]]></description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<link name="MSDN"><![CDATA[http://go.microsoft.com/fwlink/?LinkID=141058&clcid=0x409]]></link>
	<screenshot>article.jpg</screenshot>
	<doc></doc>
	<projectfile6></projectfile6>
	<projectfile7></projectfile7>
	<complexity></complexity>
	<keywords>
		<keyword>Direct2D</keyword>
		<keyword>Windows7</keyword>
	</keywords>
	<visible>true</visible>
</sample>

<sample external="true">
	<name>DirectWrite</name>
	<dxarea>Direct3D11</dxarea>
	<type>sample</type>
	<description><![CDATA[DirectWrite provides high-quality text rendering, resolution-independent outline fonts, and full Unicode text and
layout support. When used with Direct2D, DirectWrite is hardware-accelerated. DirectWrite is included as part of the Direct3D 11 Runtime.
Headers and libraries for DirectWrite are available in the Windows SDK.]]></description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<link name="MSDN"><![CDATA[http://go.microsoft.com/fwlink/?LinkID=141060&clcid=0x409]]></link>
	<screenshot>article.jpg</screenshot>
	<doc></doc>
	<projectfile6></projectfile6>
	<projectfile7></projectfile7>
	<complexity></complexity>
	<keywords>
		<keyword>DirectWrite</keyword>
		<keyword>Windows7</keyword>
	</keywords>
	<visible>true</visible>
</sample>

<sample external="true">
	<name>Windows Advanced Rasterization Platform (WARP) In-Depth Guide</name>
	<dxarea>Direct3D11</dxarea>
	<type>article</type>
	<description><![CDATA[WARP10 is a high speed, fully conformant Direct3D 10.1 level software rasterizer, and is supported by the Direct3D 11 API feature level system. It is included as part of the Direct3D 11 Runtime.]]></description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<link name="MSDN"><![CDATA[http://msdn.microsoft.com/en-us/library/dd285359.aspx]]></link>
	<screenshot>article.jpg</screenshot>
	<doc></doc>
	<projectfile6></projectfile6>
	<projectfile7></projectfile7>
	<complexity></complexity>
	<keywords>
		<keyword>Direct3D11</keyword>
		<keyword>WARP10</keyword>
		<keyword>Windows7</keyword>
	</keywords>
	<visible>true</visible>
</sample>

<sample external="true" new="true">
	<name>Direct3D9Ex Improvements</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
	<description><![CDATA[This article describes Windows 7's newly added support for Flip Mode Present and its associated Present Statistics in Direct3D 9Ex and Desktop Window Manager.]]></description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<link name="MSDN"><![CDATA[http://msdn.microsoft.com/en-us/library/ee890072.aspx]]></link>
	<screenshot>article.jpg</screenshot>
	<doc></doc>
	<projectfile6></projectfile6>
	<projectfile7></projectfile7>
	<complexity></complexity>
	<keywords>
		<keyword>Windows7</keyword>
		<keyword>Direct3D9Ex</keyword>
	</keywords>
	<visible>true</visible>
</sample>

<!-- DXGI-related external samples and articles -->

<sample external="true" new="true">
	<name>Surface Sharing Between Windows Graphics APIs</name>
	<dxarea>Articles</dxarea>
	<type>article</type>
	<description><![CDATA[This articles provides a technical overview of interoperability using surface sharing between Windows graphics APIs, including Direct3D 11, Direct2D, Direct3D 10, and Direct3D 9Ex.]]></description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<link name="MSDN"><![CDATA[http://msdn.microsoft.com/en-us/library/ee913554.aspx]]></link>
	<screenshot>article.jpg</screenshot>
	<doc></doc>
	<projectfile6></projectfile6>
	<projectfile7></projectfile7>
        <complexity>1500</complexity>
	<keywords>
		<keyword>DXGI</keyword>
	</keywords>
	<visible>true</visible>
</sample>
<sample x64="bitmatch"> 
	<name>DirectX Caps Viewer</name>
    <dxarea>Tools</dxarea>
	<type>utility</type>
	<description><![CDATA[The DirectX Caps Viewer shows information for Direct3D and DXGI devices; DirectDraw devices and capabilities; DirectInput devices and capabilities; and DirectSound devices and capabilities.]]></description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<exefolder>Utilities\Bin\</exefolder>
	<exe>DXCapsViewer.exe</exe>
	<screenshot>DXCapsViewer.jpg</screenshot>
    <doc>Documentation/DirectX9/directx_sdk.chm::/DirectX_Caps_Viewer_Tool.htm</doc>
	<keywords>
		<keyword>caps</keyword>
		<keyword>viewer</keyword>
		<keyword>utility</keyword>
		<keyword>utilities</keyword>
	</keywords>
<visible>true</visible></sample>
<sample x64="bitmatch">
  <name>DirectX Error Lookup</name>
  <dxarea>Tools</dxarea>
  <type>utility</type>
  <description><![CDATA[The DirectX Error Lookup utility allows users to enter a numerical HRESULT and get back the string equivalent as well as its description.]]></description>
  <folder>Utilities\Source\dxerr\</folder>
  <exefolder>Utilities\bin\</exefolder>
  <exe>dxerr.exe</exe>
  <screenshot>dxerr.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/DirectX_Error_Lookup_Tool.htm</doc>
  <projectfile7>dxerr.sln</projectfile7>
  <language>C++</language>
  <install common="false">
  	<reserved>dxerr</reserved>
  </install>
  <keywords>
    <keyword>dxerr</keyword>
    <keyword>lookup</keyword>
    <keyword>error</keyword>
    <keyword>utility</keyword>
    <keyword>utilities</keyword>
  </keywords>
  <visible>true</visible>
</sample><sample x64="bitmatch">
  <name>DirectX Texture Editor</name>
  <dxarea>Tools</dxarea>
  <type>utility</type>
  <description><![CDATA[The DirectX Texture Editor allows users to easily create texture maps that use the new DXTn compression formats.  Creating a DXTn-compressed texture is actually not that difficult to do: DirectDraw's Blt function can do the conversion for you.  Advanced developers will probably want to write their own tools that meet their specific needs.  Supports Direct3D 9 texture formats.]]></description>
  <folder>Utilities\Source\dxtex\</folder>
  <exefolder>Utilities\bin\</exefolder>
  <exe>DXTex.exe</exe>
  <screenshot>DXTex.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/DirectX_Texture_Editor.htm</doc>
  <projectfile7>dxtex.sln</projectfile7>
  <language>C++</language>
  <install common="false" />
  <keywords>
    <keyword>texture</keyword>
    <keyword>tool</keyword>
    <keyword>utility</keyword>
    <keyword>utilities</keyword>
  </keywords>
<visible>true</visible></sample>
<sample x64="false">
	<name>Cross-Platform Audio Creation Tool</name>
    <dxarea>Tools</dxarea>
	<type>utility</type>
	<description><![CDATA[The Microsoft Cross-Platform Audio Creation Tool (XACT) is the Windows-based graphical interface that offers a convenient way to organize and develop audio resources for titles.  It is intended for use by audio designers as a tool for packaging those audio resources.  Designers use the XACT to build XACT projects, which ultimately take the form of data files that can be given to the title programmer. With the data files produced by the XACT, the programmer can make those audio resources an interactive part of gameplay.]]></description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<exefolder>Utilities\Bin\</exefolder>
	<exe>XACT3.exe</exe>
  	<doc>Documentation/DirectX9/directx_sdk.chm::/audio_tools_xact_orient.htm</doc>  	  
	<screenshot>XACT.jpg</screenshot>
	<keywords>
	</keywords>
    <visible>true</visible>
</sample>

<sample x64="false">
	<name>XACT Audio Console</name>
    <dxarea>Tools</dxarea>
	<consoleapp>yes</consoleapp>
	<type>utility</type>
	<description><![CDATA[The Audio Console application (AudConsole.exe) is a program that supports auditioning of sounds by the XACT tool. You must launch this application before attempting to audition your sounds with XACT.]]></description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<exefolder>Utilities\Bin\</exefolder>
	<exe>audconsole3.exe</exe>
  	<doc>Documentation/DirectX9/directx_sdk.chm::/audio_tools_xact_auditioning_wggt.htm</doc>  	  
	<screenshot>ConsoleApp.jpg</screenshot>
	<keywords>
	</keywords>
    <visible>true</visible>
</sample>

<sample x64="false">
	<name>XACT Build Tool</name>
    <dxarea>Tools</dxarea>
	<consoleapp>yes</consoleapp>
	<type>utility</type>
	<description><![CDATA[The XACT Build Tool (xactbld3.exe) allows you to rebuild sound banks and wave banks from the XACT project file without needing to open the editing tool.]]></description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<exefolder>Utilities\Bin\</exefolder>
	<exe>XACTBld3.exe</exe>
  	<doc>Documentation/DirectX9/directx_sdk.chm::/audio_tools_xactbld.htm</doc>  	  
	<screenshot>ConsoleApp.jpg</screenshot>
	<keywords>
	</keywords>
    <visible>true</visible>
</sample>
<sample x64="false">
  <folder>Samples\SampleBrowser\Thumbnails\</folder>
  <name>Game Definition File Editor</name>
  <doc>Documentation\DirectX9\directx_sdk.chm::/GameExplorer_GDFTool.htm</doc>
  <dxarea>Tools</dxarea>
  <type>utility</type>
  <description>
      <![CDATA[Editor to create Game Definition Files (.GDF) for Game Explorer on Windows Vista and Windows 7.]]>
  </description>
  <exefolder>Utilities\Bin\</exefolder>
  <exe>GDFMaker.exe</exe>
  <screenshot>GDFMaker.jpg</screenshot>
<visible>true</visible></sample><sample>
  <name>GDFTrace</name>
  <dxarea>Tools</dxarea>
  <type>utility</type>
  <description><![CDATA[This is a command line tool that displays Game Explorer GDF metadata contained in a binary and highlights any warnings.]]></description>
  <folder>Utilities\Source\GDFTrace\</folder>
  <exe>GDFTrace.exe</exe>
  <exefolder>Utilities\Bin\</exefolder>
  <screenshot>GDFTrace.jpg</screenshot>
  <doc>Documentation/DirectX9/directx_sdk.chm::/GameExplorer_GDFValidator.htm</doc>
  <projectfile6>GDFTrace.dsw</projectfile6>
  <projectfile7>GDFTrace.sln</projectfile7>
  <install common="false">
  </install>
  <consoleapp>yes</consoleapp>
  <language>C++</language>
  <dxsubarea />
  <visible>true</visible>
</sample><sample>
	<visible>true</visible>
	<name>MeshConvert</name>
	<dxarea>Tools</dxarea>
	<dxsubarea></dxsubarea>
	<type>utility</type>
	<description>
  <![CDATA[MeshConvert is a command line example tool that converts from X-file, xml, and obj formats to X-file and sdkmesh formats.]]>	
  </description>
	<folder>Utilities\Source\MeshConvert\</folder>
	<exe>MeshConvert.exe</exe>
	<exefolder>Utilities\Bin\</exefolder>
	<screenshot>MeshConvert.jpg</screenshot>
	<projectfile7>MeshConvert_2003.sln</projectfile7>
	<install>
		<additional src="..\..\..\Samples\C++\DXUT" dest="DXUT" />
	</install>
	<language>C++</language>
	<consoleapp>yes</consoleapp>
	<keywords>
		<keyword>IDirect3DDevice9</keyword>
		<keyword>IDirect3D9</keyword>
	</keywords>
</sample>
<sample updated="true">
	<name>PIX For Windows</name>
	<dxarea>Tools</dxarea>
	<type>utility</type>
	<description><![CDATA[Performance Investigator for DirectX (PIX) for Windows is a tool designed to capture detailed performance information from a running application. This tool will help developers analyze the work done by the CPU and the GPU in order to pinpoint performance bottlenecks.

]]></description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<exefolder>Utilities\bin\</exefolder>
	<exe>PIXWin.exe</exe>
        <doc>Documentation/DirectX9/directx_sdk.chm::/dxsdk_tools_performance_pix.htm</doc>
    	<screenshot>PIX.gif</screenshot>
	<keywords>
		<keyword>profile</keyword>
		<keyword>utility</keyword>
		<keyword>utilities</keyword>
	</keywords>
	<visible>true</visible>
</sample>
<sample>
	<name>Direct3D Texture Converter</name>
   <dxarea>Tools</dxarea>
	<consoleapp>yes</consoleapp>
	<type>utility</type>
	<description><![CDATA[Textures can be converted between formats from the command line using the Texture Converter (texconv.exe). Supports Direct3D 9 texture formats.]]></description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<exefolder>Utilities\Bin\</exefolder>
	<exe>texconv.exe</exe>
	<screenshot>ConsoleApp.jpg</screenshot>
   <doc>Documentation/DirectX9/directx_sdk.chm::/Texture_Conversion_Tool.htm</doc>
	<keywords>
		<keyword>texture</keyword>
		<keyword>converter</keyword>
		<keyword>utility</keyword>
		<keyword>utilities</keyword>
	</keywords>
<visible>true</visible></sample>
<sample>
	<name>Direct3D Extended Texture Converter</name>
	<dxarea>Tools</dxarea>
	<consoleapp>yes</consoleapp>
	<type>utility</type>
	<description><![CDATA[This version of the Texture Converter utility supports Direct3D 10.x and 11 texture formats (texconvex.exe).]]></description>
	<folder>Samples\SampleBrowser\Thumbnails\</folder>
	<exefolder>Utilities\Bin\</exefolder>
	<exe>texconvex.exe</exe>
<doc>Documentation/DirectX9/directx_sdk.chm::/tex_conv_10.htm</doc>
	<screenshot>ConsoleApp.jpg</screenshot>
	<keywords>
		<keyword>texture</keyword>
		<keyword>converter</keyword>
		<keyword>utility</keyword>
		<keyword>utilities</keyword>
	</keywords>
    <visible>true</visible>
</sample>
</samples> 
